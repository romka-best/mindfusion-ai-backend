import random
from datetime import datetime, timezone
from typing import Union

import pymorphy3

from bot.database.models.feedback import FeedbackStatus
from bot.database.models.game import GameType
from bot.database.models.generation import GenerationReaction
from bot.database.models.package import Package, PackageStatus
from bot.database.models.product import Product, ProductType, ProductCategory
from bot.database.models.prompt import Prompt
from bot.database.operations.product.getters import get_product
from bot.helpers.calculate_percentage_difference import calculate_percentage_difference
from bot.helpers.formatters.format_number import format_number
from bot.helpers.getters.get_model_version import get_model_version
from bot.helpers.getters.get_time_until_limit_update import get_time_until_limit_update
from bot.helpers.getters.get_user_discount import get_user_discount
from bot.locales.texts import Texts
from bot.database.models.common import (
    Model,
    ModelType,
    Quota,
    Currency,
    PaymentMethod,
    VideoSummaryFocus,
    VideoSummaryFormat,
    VideoSummaryAmount,
    AspectRatio,
    SendType,
)
from bot.database.models.subscription import (
    Subscription,
    SubscriptionStatus,
)
from bot.database.models.user import UserSettings
from bot.locales.types import LanguageCode


class Russian(Texts):
    morph = pymorphy3.MorphAnalyzer()

    # Action
    ACTION_BACK = "◀️ Назад"
    ACTION_CLOSE = "🚪 Закрыть"
    ACTION_CANCEL = "❌ Отменить"
    ACTION_APPROVE = "✅ Подтвердить"
    ACTION_DENY = "❌ Отклонить"
    ACTION_TO_OTHER_MODELS = "◀️ К другим моделям"
    ACTION_TO_OTHER_TYPE_MODELS = "◀️ К другим типам моделей"

    # Additional Bot
    @staticmethod
    def additional_bot_info(link: str) -> str:
        return f"""
👋 <b>Привет!</b>

⚠️ <b>Этот бот не обрабатывает запросы, а лишь перенаправляет вас в нашего основного помощника по нейросетям</b>

🏆 Миссия нашего бота — предоставить каждому доступ к лучшим нейросетям

👉 {link}
"""

    # Bonus
    @staticmethod
    def bonus_info(balance: int) -> str:
        word = Russian.morph.parse('кредит')[0]
        current_balance_info = f'{int(balance)} {word.make_agree_with_number(balance).word} 🪙'

        return f"""
🎁 <b>Бонусный баланс</b>

💰 На счету: <b>{current_balance_info}</b>

💡 <b>На что потратить:</b>
• Запросы в любой нейросети
• Доступ к цифровым сотрудникам
• Голосовые ответы/запросы
• Быстрые ответы без пауз

Выберите действие 👇
"""

    BONUS_EARN = "➕ Заработать"
    BONUS_SPEND = "➖ Потратить"

    @staticmethod
    def bonus_info_earn(user_id: str, referred_count: int, feedback_count: int, play_count: int):
        return f"""
➕ <b>Как заработать кредиты</b>

👥 <i>Пригласить друзей:</i>
• <b>+25 кредитов</b> вам и другу
• Ссылка для приглашения:
{Texts.bonus_referral_link(user_id, False)}
• Вы пригласили: {referred_count}

💭 <i>Оставить обратную связь:</i>
• <b>+25 кредитов</b> за отзыв
• Вы оставили: {feedback_count}

🎮 <i>Испытать удачу:</i>
• <b>+1-100 кредитов</b> за выигрыш
• Вы сыграли: {play_count}

Выберите действие 👇
"""

    @staticmethod
    def bonus_info_spend(balance: int):
        word = Russian.morph.parse('кредит')[0]
        current_balance_info = f'{int(balance)} {word.make_agree_with_number(balance).word} 🪙'

        return f"""
💰 На счету: <b>{current_balance_info}</b>

Выберите, как <b>потратить кредиты:</b> 👇
"""

    BONUS_ACTIVATED_SUCCESSFUL = """
🌟 <b>Бонус активирован!</b>

Вы успешно приобрели пакеты 🚀
"""
    BONUS_INVITE_FRIEND = "👥 Пригласить друга"
    BONUS_REFERRAL_SUCCESS = """
🌟 <b>Ваша реферальная магия сработала!</b>

Ваш и баланс друга увеличился на <b>25 кредитов</b> 🪙
"""
    BONUS_REFERRAL_LIMIT_ERROR = """
🌟 <b>Ваша реферальная магия сработала!</b>

К сожалению, я не могу начислить вам вознаграждение, так как превышен лимит
"""
    BONUS_LEAVE_FEEDBACK = "📡 Оставить обратную связь"
    BONUS_CASH_OUT = "🛍 Потратить кредиты"
    BONUS_PLAY = "🎮 Сыграть"
    BONUS_PLAY_GAME = "🎮 Испытать удачу"
    BONUS_PLAY_GAME_CHOOSE = """
🎮 <b>Выберите игру</b>

👉 <i>У вас только одна попытка в день</i>
"""
    BONUS_PLAY_BOWLING_GAME = "🎳 Боулинг"
    BONUS_PLAY_BOWLING_GAME_INFO = """
🎳 <b>Боулинг</b>

Нажмите <b>«Сыграть»</b>, и я мгновенно брошу шар в кегли! Шанс выиграть — <b>100%</b>

Количество сбитых кеглей — это и есть количество выигранных кредитов: <b>1-6</b>
"""
    BONUS_PLAY_SOCCER_GAME = "⚽️ Футбол"
    BONUS_PLAY_SOCCER_GAME_INFO = """
⚽️ <b>Футбол</b>

Нажмите <b>«Сыграть»</b>, и я брошу мяч в ворота! Шанс забить гол и выиграть кредиты составляет <b>60%</b>

Если я попаду в цель, вы получите <b>5 кредитов</b>
"""
    BONUS_PLAY_BASKETBALL_GAME = "🏀 Баскетбол"
    BONUS_PLAY_BASKETBALL_GAME_INFO = """
🏀 <b>Баскетбол</b>

Нажмите <b>«Сыграть»</b>, и я брошу мяч в баскетбольное кольцо! Шанс, что мяч попадёт точно в цель, составляет <b>40%</b>

Если я попаду, вы получите <b>10 кредитов</b>
"""
    BONUS_PLAY_DARTS_GAME = "🎯 Дартс"
    BONUS_PLAY_DARTS_GAME_INFO = """
🎯 <b>Дартс</b>

Нажмите <b>«Сыграть»</b>, и я запущу дротик в мишень! Шанс попасть в центр составляет <b>~16.67%</b>

Если я попаду, вы получите <b>15 кредитов</b>
"""
    BONUS_PLAY_DICE_GAME = "🎲 Кубик"
    BONUS_PLAY_DICE_GAME_INFO = """
🎲 <b>Кубик</b>

Выберите число от 1 до 6, а я брошу кубик! Шанс на победу — <b>1 к 6</b>

Если угадаете, какое число выпадет, вы получите <b>20 кредитов</b>
"""
    BONUS_PLAY_CASINO_GAME = "🎰 Казино"
    BONUS_PLAY_CASINO_GAME_INFO = """
🎰 <b>Казино</b>

Нажмите <b>«Сыграть»</b>, и я запущу барабаны казино. Шанс поймать три одинаковых числа — почти <b>5%</b>. Шанс поймать три семёрки чуть выше <b>1%</b>

• Если выпадет три одинаковых числа, вы получите <b>50 кредитов</b>
• Если выпадет три семёрки, вы получите <b>100 кредитов</b>
"""
    BONUS_PLAY_GAME_WON = """
🎉 <b>Вы выиграли!</b>

Возвращайтесь завтра за новыми победами 💪
"""
    BONUS_PLAY_GAME_LOST = """
😔 <b>Сегодня не повезло...</b>

Попробуйте снова завтра — возможно, удача будет на вашей стороне! 🍀
"""

    @staticmethod
    def bonus_play_game_reached_limit():
        hours_word = Russian.morph.parse('час')[0]
        minutes_word = Russian.morph.parse('минута')[0]
        hours, minutes = get_time_until_limit_update(hours=0)

        return f"""
⏳ <b>Вы уже сыграли сегодня!</b>

Возвращайтесь через <i>{hours} {hours_word.make_agree_with_number(hours).word} {minutes} {minutes_word.make_agree_with_number(minutes).word}</i> и покажите, на что вы способны! 👏
"""

    # Catalog
    CATALOG_INFO = """
📁 <b>Каталог возможностей</b>

Выберите нужный раздел и нажмите кнопку 👇
"""
    CATALOG_MANAGE = "🎭 Управление каталогом"
    CATALOG_DIGITAL_EMPLOYEES = "🎭 Роли"
    CATALOG_DIGITAL_EMPLOYEES_INFO = """
🎭 <b>Каталог ролей</b>

Выберите цифрового сотрудника ниже 👇
"""
    CATALOG_DIGITAL_EMPLOYEES_FORBIDDEN_ERROR = """
🔒 <b>Вы попали в зону VIP!</b>

У вас пока нет доступа к цифровым сотрудникам

Вы можете его получить нажав на кнопку ниже:
"""
    CATALOG_PROMPTS = "📚 Промпты"
    CATALOG_PROMPTS_CHOOSE_MODEL_TYPE = """
📚 <b>Каталог промптов</b>

Выберите нужный <b>тип моделей</b> нажав на кнопку ниже 👇
"""
    CATALOG_PROMPTS_CHOOSE_CATEGORY = """
📚 <b>Каталог промптов</b>

Выберите нужную <b>категорию</b> нажав на кнопку ниже 👇
"""
    CATALOG_PROMPTS_CHOOSE_SUBCATEGORY = """
📚 <b>Каталог промптов</b>

Выберите нужную <b>подкатегорию</b> нажав на кнопку ниже 👇
"""

    @staticmethod
    def catalog_prompts_choose_prompt(prompts: list[Prompt]):
        prompt_info = ''
        for index, prompt in enumerate(prompts):
            is_last = index == len(prompts) - 1
            right_part = '\n' if not is_last else ''
            prompt_name = prompt.names.get(LanguageCode.RU) or prompt.names.get(LanguageCode.EN)
            prompt_info += f'<b>{index + 1}</b>: {prompt_name}{right_part}'

        return f"""
📚 <b>Каталог промптов</b>

{prompt_info}

Чтобы получить полный промпт, выберите <b>номер промпта</b> нажав на кнопку ниже 👇
"""

    @staticmethod
    def catalog_prompts_info_prompt(prompt: Prompt, products: list[Product]):
        model_info = ''
        for index, product in enumerate(products):
            is_last = index == len(products) - 1
            left_part = '┣' if not is_last else '┗'
            right_part = '\n' if not is_last else ''
            product_name = product.names.get(LanguageCode.RU) or product.names.get(LanguageCode.EN)
            model_info += f'    {left_part} <b>{product_name}</b>{right_part}'

        return f"""
📚 <b>Каталог промптов</b>

Вы выбрали промпт: <b>{prompt.names.get(LanguageCode.RU) or prompt.names.get(LanguageCode.EN)}</b>

Этот промпт подходит для моделей:
{model_info}

Выберите действие ниже 👇
"""

    @staticmethod
    def catalog_prompts_examples(products: list[Product]):
        prompt_examples_info = ''
        for index, product in enumerate(products):
            is_last = index == len(products) - 1
            is_first = index == 0
            left_part = '┣' if not is_last else '┗'
            right_part = '\n' if not is_last else ''
            product_name = product.names.get(LanguageCode.RU) or product.names.get(LanguageCode.EN)
            prompt_examples_info += f'{left_part if not is_first else "┏"} <b>{index + 1}</b>: {product_name}{right_part}'

        return prompt_examples_info

    CATALOG_PROMPTS_GET_SHORT_PROMPT = "⚡️Получить короткий промпт"
    CATALOG_PROMPTS_GET_LONG_PROMPT = "📜 Получить длинный промпт"
    CATALOG_PROMPTS_GET_EXAMPLES = "👀 Получить результаты промпта"
    CATALOG_PROMPTS_COPY = "📋 Скопировать промпт"

    # Chats
    @staticmethod
    def chat_info(current_chat_name: str, total_chats: int) -> str:
        return f"""
🗨️ <b>Текущий чат: {current_chat_name}</b>

📈 Всего чатов: <b>{total_chats}</b>

Выберите действие ниже 👇
"""

    CHAT_DEFAULT_TITLE = "Новый чат"
    CHAT_MANAGE = "💬 Управление чатами"
    CHAT_CREATE = "💬 Создать новый"
    CHAT_CREATE_SUCCESS = """
🎉 <b>Чат создан!</b>

Переключиться на него можно в /settings
"""
    CHAT_TYPE_TITLE = "Напишите название чата"
    CHAT_SWITCH = "🔄 Переключиться"
    CHAT_SWITCH_FORBIDDEN_ERROR = """
🚨 <b>Подождите!</b>

Сейчас вы находитесь в вашем единственном чате

Создайте новый, чтобы перемещаться между ними
"""
    CHAT_SWITCH_SUCCESS = "Чат успешно переключен 🎉"
    CHAT_RESET = "♻️ Очистить"
    CHAT_RESET_WARNING = """
🧹 <b>Очистка чата на горизонте!</b>

Вы собираетесь стереть все сообщения и очистить контекст текущего чата

Вы уверены, что хотите продолжить?
"""
    CHAT_RESET_SUCCESS = """
🧹<b>Чат успешно очищен!</b>

Теперь я, как золотая рыбка, не помню, что было сказано ранее 🐠
"""
    CHAT_DELETE = "🗑 Удалить"
    CHAT_DELETE_FORBIDDEN_ERROR = """
🚨 <b>Подождите!</b>

Это ваш единственный чат, его удалить нельзя
"""
    CHAT_DELETE_SUCCESS = "Чат успешно удалён 🎉"

    # Eightify
    EIGHTIFY = "👀 YouTube Резюме"
    EIGHTIFY_INFO = """
👀 С помощью <b>YouTube Резюме</b> вы можете получить краткую выжимку видео из YouTube

<b>Как это работает?</b>
🔗 Отправьте ссылку на нужное YouTube-видео
✅ Я обработаю его и верну вам краткий пересказ

Жду ссылку 😊
"""
    EIGHTIFY_VALUE_ERROR = """
🧐 <b>Это не похоже на ссылку YouTube</b>

Пожалуйста, <b>отправьте другую ссылку</b>
"""
    EIGHTIFY_VIDEO_ERROR = """
😢 К сожалению, это YouTube видео <b>я не могу обработать</b>

Пожалуйста, <b>отправьте другую ссылку</b>
"""

    # Errors
    ERROR = """
🤒 <b>Я получил неизвестную ошибку</b>

Попробуйте ещё раз или обратитесь в тех. поддержку:
"""
    ERROR_NETWORK = """
🤒 <b>У меня разорвалось соединение с Telegram</b>

Попробуйте ещё раз или обратитесь в тех. поддержку:
"""
    ERROR_PROMPT_REQUIRED = """
🚨 <b>Стоп! А где промпт?</b>

Запрос без промпта, как чай без сахара — совсем невкусно ☕️

Напишите что-нибудь — и магия начнётся 🪄
"""
    ERROR_PROMPT_TOO_LONG = """
🚨 <b>Ого! Это не промпт, это целый роман!</b>

Попробуйте сократить текст — иначе модель уйдёт в отпуск 🌴

Жду новый, более компактный промпт ✨
"""
    ERROR_REQUEST_FORBIDDEN = """
🚨 <b>Ой-ой! Ваш запрос не прошёл проверку</b>

Мой страж безопасности обнаружил что-то подозрительное 🛑

Проверьте текст/фото на запрещённый контент и попробуйте снова 😌
"""
    ERROR_PHOTO_FORBIDDEN = """
⚠️ <b>Отправка фотографий доступна только в моделях:</b>

🔤 <b>Текстовые Модели</b>:
    ┣ ChatGPT 4.0 Omni Mini ✉️
    ┣ ChatGPT 4.0 Omni 💥
    ┣ ChatGPT o1 🧪
    ┣ Claude 3.7 Sonnet 💫
    ┣ Claude 3.0 Opus 🚀
    ┣ Gemini 2.0 Flash 🏎
    ┣ Gemini 2.5 Pro 💼
    ┣ Gemini 1.0 Ultra 🛡️
    ┗ Grok 2.0 🐦

🖼 <b>Графические Модели</b>:
    ┣ 🎨 Midjourney
    ┣ 🦄 Stable Diffusion XL
    ┣ 🧑‍🚀 Stable Diffusion 3.5
    ┣ 🌲 Flux 1.0 Dev
    ┣ 🏔 Flux 1.1 Pro
    ┣ 🌌 Luma Photon
    ┣ 📷 FaceSwap
    ┗ 🪄 Photoshop AI

📹 <b>Видео Модели</b>:
    ┣ 🎬 Kling
    ┣ 🎥 Runway
    ┣ 🔆 Luma Ray
    ┗ 🐇 Pika

Чтобы переключиться на модель с поддержкой чтения изображений, используйте кнопку ниже 👇
"""
    ERROR_PHOTO_REQUIRED = """
⚠️ <b>Фотография в этой модели является обязательной</b>

Отправьте фото вместе с промптом
"""
    ERROR_ALBUM_FORBIDDEN = """
⚠️ <b>В текущей модели я не умею обрабатывать сразу несколько фотографий</b>

Отправьте только 1 фото
"""
    ERROR_VIDEO_FORBIDDEN = "⚠️ Я пока не умею работать с видео в этой модели"
    ERROR_DOCUMENT_FORBIDDEN = "⚠️ Я пока не умею работать с такими документами"
    ERROR_STICKER_FORBIDDEN = "⚠️ Я пока не умею работать со стикерами"
    ERROR_SERVER_OVERLOADED = """
🫨 <b>Сейчас у меня большая нагрузка на сервер</b>

Попробуйте ещё раз или чуть-чуть позже
"""
    ERROR_FILE_TOO_BIG = """
🚧 <b>Файл слишком большой!</b>

Я могу обрабатывать только файлы размером меньше 20МБ

Попробуйте ещё раз, но с размером поменьше 😉
"""
    ERROR_IS_NOT_NUMBER = """
🚧 <b>Это не число!</b>

Попробуйте ещё раз, но с числовым значением 🔢
"""

    @staticmethod
    def error_aspect_ratio_invalid(
        min_ratio: str,
        max_ratio: str,
        actual_ratio: str,
    ) -> str:
        return f"""
⚠️ <b>Недопустимое соотношение сторон изображения</b>

Соотношение ширины и высоты изображения должно быть между {min_ratio} и {max_ratio}.
Соотношение сторон вашего изображения — {actual_ratio}.

Повторите, пожалуйста, запрос с другим изображением 😉
"""

    @staticmethod
    def error_internal_ai_model(ai_model_name) -> str:
        return f"⚠️ Ошибка на стороне модели {ai_model_name}. Попробуйте снова чуть позже."

    # Examples
    EXAMPLE_INFO = "Чтобы получить доступ к этой нейросети нажмите кнопку ниже:"

    @staticmethod
    def example_text_model(model: str):
        return f"👇 Вот так ответил бы на ваш запрос *{model}*"

    @staticmethod
    def example_image_model(model: str):
        return f"☝️ Вот так на ваш запрос нарисовал бы {model}"

    # FaceSwap
    FACE_SWAP_INFO = """
📷 <b>FaceSwap: Выберите один из 3-х вариантов</b>

👤 <b>Отправить фото</b> — заменю лицо на вашем изображении

✍️ <b>Написать промпт</b> — создам картинку с вашим лицом по описанию

🤹‍♂️ <b>Выбрать готовый пакет</b> — заменю лица на готовых изображениях
"""
    FACE_SWAP_CHOOSE_PHOTO = "👤 Отправить фото"
    FACE_SWAP_CHOOSE_PHOTO_INFO = """
👤 <b>Отправьте фото</b>

1️⃣ Отправьте фотографию, где ваше лицо хорошо видно
2️⃣ Я заменю лицо на вашем фото, сохранив остальные детали

💡 Чем качественнее фото, тем лучше результат!
"""
    FACE_SWAP_CHOOSE_PROMPT = "✍️ Написать промпт"
    FACE_SWAP_CHOOSE_PROMPT_INFO = """
✍️ <b>Напишите промпт</b>

1️⃣ Опишите подробно, какую картинку хотите получить
2️⃣ Я создам изображение с вашим лицом на основе описания

💡 Чем подробнее описание, тем точнее результат!
"""
    FACE_SWAP_CHOOSE_PACKAGE = "🤹‍♂️ Выбрать пакет"
    FACE_SWAP_CHOOSE_PACKAGE_INFO = """
🤹‍♂️ <b>Выберите пакет</b>

1️⃣ Выберите один из готовых пакетов изображений
2️⃣ Я заменю лица на всех фото сразу

💡 Быстро и просто!
"""
    FACE_SWAP_GENERATIONS_IN_PACKAGES_ENDED = """
📷 <b>Ух ты! Использованы все генерации в пакетах!</b>

<b>Что дальше?</b>
👤 Отправьте фото с лицом — заменю его на ваше
✍️ Напишите промпт — создам картинку с вашим изображением
"""
    FACE_SWAP_MIN_ERROR = """
🤨 <b>Постойте!</b>

Вы хотите запросить меньше 1 изображения, так не пойдёт

<b>Введите число больше 0</b>
"""
    FACE_SWAP_MAX_ERROR = """
🤨 <b>Постойте!</b>

Вы просите больше изображений, чем у нас есть

<b>Введите число поменьше</b>
"""
    FACE_SWAP_NO_FACE_FOUND_ERROR = """
🚫 <b>Проблема с обработкой фотографии</b>

К сожалению, на фотографии мне не удалось определить лицо. Пожалуйста, загрузите новую фотографию в хорошем качестве, на которой отчётливо видно ваше лицо

После загрузки новой фотографии попробуйте ещё раз 🔄
"""

    @staticmethod
    def face_swap_choose_package(name: str, available_images: int, total_images: int, used_images: int) -> str:
        remain_images = total_images - used_images

        word = Russian.morph.parse('изображение')[0]

        footer_text = f'<b>Напишите</b>, сколько смен лиц вы хотите сделать, или <b>выберите</b> ниже 👇' if remain_images > 0 else ''

        return f"""
<b>{name}</b>

В пакете есть: <b>{total_images} {word.make_agree_with_number(total_images).word}</b>

🌠 <b>Доступные генерации</b>: {available_images} {word.make_agree_with_number(available_images).word}
<i>Если нужно больше, ознакомьтесь с /buy или /bonus</i>

🔍 <b>Использовано</b>: {used_images} {word.make_agree_with_number(used_images).word}
🚀 <b>Осталось</b>: {remain_images} {word.make_agree_with_number(remain_images).word}

{footer_text}
"""

    @staticmethod
    def face_swap_package_forbidden_error(available_images: int) -> str:
        word = Russian.morph.parse('генерация')[0]

        return f"""
🚧 <b>Недостаточно генераций!</b>

У вас осталось только <b>{available_images} {word.make_agree_with_number(available_images).word}</b> в вашем арсенале

💡 <b>Совет</b>: Попробуйте число поменьше, или воспользуйтесь /buy для неограниченных возможностей!
"""

    # Feedback
    FEEDBACK_INFO = """
📡 <b>Обратная связь</b>

Помогите мне стать лучше — поделитесь своим мнением:
• <b>Что вам нравится?</b> Расскажите
• <b>Есть предложения?</b> Поделитесь
• <b>Возникли проблемы?</b> Сообщите

Жду ваш отзыв 💌
"""
    FEEDBACK_SUCCESS = """
🌟 <b>Обратная связь получена!</b>

Ваше мнение — это секретный ингредиент успеха. Я уже готовлю улучшения 🍳

Вы получите <b>25 кредитов</b> после того, как мои создатели проверят содержание обратной связи
"""
    FEEDBACK_APPROVED = """
🌟 <b>Обратная связь одобрена!</b>

Спасибо, что помогаете мне становиться лучше

Ваша награда: <b>+25 кредитов</b> 🪙
"""
    FEEDBACK_APPROVED_WITH_LIMIT_ERROR = """
🌟 <b>Обратная связь одобрена!</b>

Спасибо, что помогаете мне становиться лучше

К сожалению, я не могу начислить вам вознаграждение, так как превышен лимит
"""
    FEEDBACK_DENIED = """
🌟 <b>Обратная связь отклонена!</b>

Ваша обратная связь была недостаточно конструктивная и я не могу увеличить ваш бонусный баланс 😢
"""

    # Flux
    FLUX_STRICT_SAFETY_TOLERANCE = "🔒 Сильная"
    FLUX_MIDDLE_SAFETY_TOLERANCE = "🔏 Средняя"
    FLUX_PERMISSIVE_SAFETY_TOLERANCE = "🔓 Слабая"

    # Gemini Video
    GEMINI_VIDEO = "📼 Видео Резюме"
    GEMINI_VIDEO_INFO = """
📼 С помощью <b>Видео Резюме</b> вы можете получить краткую выжимку любого видео

<b>Как это работает?</b> Есть 2 варианта:
1.
🔗 Отправьте ссылку на нужное видео
⚠️ Видео должно быть не более 1 часа
✅ Я обработаю его и верну вам краткий пересказ

2.
🔗 Отправьте само видео здесь в Telegram
⚠️ Видео должно быть не более 1 часа и размером меньше 20МБ
✅ Я обработаю его и верну вам краткий пересказ

Жду ссылку/видео 😊
"""
    GEMINI_VIDEO_TOO_LONG_ERROR = """
⚠️ <b>Длина видео должна быть меньше 60 минут</b>

Пожалуйста, <b>отправьте другое видео</b>
"""
    GEMINI_VIDEO_VALUE_ERROR = """
⚠️ <b>Это не похоже на ссылку видео</b>

Пожалуйста, <b>отправьте другую ссылку</b>
"""

    @staticmethod
    def gemini_video_prompt(
        focus: VideoSummaryFocus,
        format: VideoSummaryFormat,
        amount: VideoSummaryAmount,
    ) -> str:
        if focus == VideoSummaryFocus.INSIGHTFUL:
            focus = Russian.VIDEO_SUMMARY_FOCUS_INSIGHTFUL
        elif focus == VideoSummaryFocus.FUNNY:
            focus = Russian.VIDEO_SUMMARY_FOCUS_FUNNY
        elif focus == VideoSummaryFocus.ACTIONABLE:
            focus = Russian.VIDEO_SUMMARY_FOCUS_ACTIONABLE
        elif focus == VideoSummaryFocus.CONTROVERSIAL:
            focus = Russian.VIDEO_SUMMARY_FOCUS_CONTROVERSIAL

        if format == VideoSummaryFormat.LIST:
            format = "1. <Эмодзи> Описание"
        elif format == VideoSummaryFormat.FAQ:
            format = "❔ _Вопрос_: <Вопрос>.\n❕ _Ответ_: <Ответ>"

        if amount == VideoSummaryAmount.AUTO:
            amount = Russian.VIDEO_SUMMARY_AMOUNT_AUTO
        elif amount == VideoSummaryAmount.SHORT:
            amount = Russian.VIDEO_SUMMARY_AMOUNT_SHORT
        elif amount == VideoSummaryAmount.DETAILED:
            amount = Russian.VIDEO_SUMMARY_AMOUNT_DETAILED

        return f"""
Пожалуйста, сделай красивую и структурированную суммаризацию предоставленного видео с использованием Markdown разметки в следующем формате:
- Раздели суммаризацию на тематические блоки в формате: **<Эмодзи> Название тематического блока**.
- В каждом блоке укажи несколько ключевых моментов в формате: {format}.
- Заверши каждый пункт четкой и информативной мыслью.
- Избегай использования символа "-" в структуре.
- Избегай использования HTML тегов.
- Выделяй ключевые слова в формате: **Ключевые слова**
- Построй суммаризацию так, чтобы она была интересной, визуально удобной и структурированной.
- Фокус суммаризации: {focus}.
- Длина ответа: {amount}. Где Кратко: 2-3 тематических блока. Авто: 4-5 тематических блоков. Детально: 6-10 тематических блоков. Под тематическими блоками подразумевается блоки с заголовоками, а не пункты, но количество пунктов также может зависить от длины ответа.
- Ответ предоставь на русском языке.

Используй уникальные эмодзи, чтобы обозначить суть каждого пункта. Ответ должен быть выглядеть красиво визуально и строго структурирован в указанном формате, без вводных фраз и комментариев.
"""

    # Gender
    GENDER_CHOOSE = "🚹🚺 Указать пол"
    GENDER_CHANGE = "🚹🚺 Поменять пол"
    GENDER_UNSPECIFIED = "🤷 Не указан"
    GENDER_MALE = "👕 Мужской"
    GENDER_FEMALE = "👚 Женский"

    # Generation
    GENERATION_IMAGE_SUCCESS = "✨ Вот ваше созданное изображение 🎨"
    GENERATION_VIDEO_SUCCESS = "✨ Вот ваше созданное видео 🎞"

    # Help
    HELP_INFO = """
🛟 <b>Помощь и команды</b>

─────────────

👋 <b>Общие команды:</b>
/start — Обо мне
/profile — Ваш профиль
/language — Сменить язык
/buy — Приобрести подписку/пакеты
/bonus — Узнать о бонусах
/promo_code — Активировать промокод
/feedback — Оставить обратную связь
/terms — Пользовательское соглашение

─────────────

🤖 <b>Нейросети:</b>
/model — Выбрать нейросеть
/info — Узнать про нейросети
/catalog — Каталог ролей и промптов
/settings — Настройка моделей

─────────────

🔤 <b>Текстовые нейросети:</b>
/chatgpt — Выбрать ChatGPT
/claude — Выбрать Claude
/gemini — Выбрать Gemini
/grok — Выбрать Grok
/deep_seek — Выбрать DeepSeek
/perplexity — Выбрать Perplexity

─────────────

📝 <b>Резюме нейросети:</b>
/youtube_summary — Выбрать YouTube Резюме
/video_summary — Выбрать Видео Резюме

─────────────

🖼 <b>Графические нейросети:</b>
/dalle — Выбрать DALL-E
/midjourney — Выбрать Midjourney
/stable_diffusion — Выбрать Stable Diffusion
/flux — Выбрать Flux
/luma_photon — Выбрать Luma Photon
/recraft — Выбрать Recraft
/face_swap — Выбрать FaceSwap
/photoshop — Выбрать Photoshop AI

─────────────

🎵 <b>Музыкальные нейросети:</b>
/music_gen — Выбрать MusicGen
/suno — Выбрать Suno

─────────────

📹 <b>Видео нейросети:</b>
/kling — Выбрать Kling
/runway — Выбрать Runway
/luma_ray — Выбрать Luma Ray
/pika — Выбрать Pika

─────────────

По всем вопросам вы также можете обратиться в тех. поддержку:
"""

    # Info
    INFO = "🤖 <b>Выберите тип моделей</b>, про которые вы хотите получить информацию:"
    INFO_TEXT_MODELS = "🤖 <b>Выберите текстовую модель</b>, про которую вы хотите получить информацию:"
    INFO_IMAGE_MODELS = "🤖 <b>Выберите графическую модель</b>, про которую вы хотите получить информацию:"
    INFO_MUSIC_MODELS = "🤖 <b>Выберите музыкальную модель</b>, про которую вы хотите получить информацию:"
    INFO_VIDEO_MODELS = "🤖 <b>Выберите видео модель</b>, про которую вы хотите получить информацию:"
    INFO_CHAT_GPT = "🤖 <b>Выберите ChatGPT модель</b>, про которую вы хотите получить информацию:"
    INFO_CHAT_GPT_4_OMNI_MINI = f"""
<b>{Texts.CHAT_GPT_4_OMNI_MINI}</b>

<b>Создатель:</b> OpenAI

💡<b>Варианты использования:</b>
• Генерация контента
• Генерация идей
• Копирайтинг
• Общение и поддержка
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом
• Рекомендации

🚦 <b>Оценки:</b>
• Работа с изображениями: Да 🟢
• Качество ответов: Выше среднего 🟢
• Скорость ответа: Высокая 🟢

📊 <b>Тесты:</b>
• MMLU: 82.0%
• GPQA: 40.2%
• DROP: 79.7%
• MGSM: 87.0%
• MATH: 70.2%
• HumanEval: 87.2%
• MMMU: 59.4%
• MathVista: 56.7%
"""
    INFO_CHAT_GPT_4_OMNI = f"""
<b>{Texts.CHAT_GPT_4_OMNI}</b>

<b>Создатель:</b> OpenAI

💡<b>Варианты использования:</b>
• Генерация контента
• Генерация идей
• Копирайтинг
• Общение и поддержка
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом
• Рекомендации

🚦 <b>Оценки:</b>
• Работа с изображениями: Да 🟢
• Качество ответов: Высокое 🟢
• Скорость ответа: Выше среднего 🟢

📊 <b>Тесты:</b>
• MMLU: 88.7%
• GPQA: 53.6%
• DROP: 83.4%
• MGSM: 90.5%
• MATH: 76.6%
• HumanEval: 90.2%
• MMMU: 69.1%
• MathVista: 63.8%
"""
    INFO_CHAT_GPT_O_3_MINI = f"""
<b>{Texts.CHAT_GPT_O_3_MINI}</b>

<b>Создатель:</b> OpenAI

💡<b>Варианты использования:</b>
• Генерация контента
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом

🚦 <b>Оценки:</b>
• Работа с изображениями: Нет 🔴
• Качество ответов: Высокое 🟢
• Скорость ответа: Средняя 🟡

📊 <b>Тесты:</b>
• MMLU: 86.9%
• GPQA: 79.7%
• MATH: 97.9%
• HumanEval: 92.4%
"""
    INFO_CHAT_GPT_O_1 = f"""
<b>{Texts.CHAT_GPT_O_1}</b>

<b>Создатель:</b> OpenAI

💡<b>Варианты использования:</b>
• Генерация контента
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом

🚦 <b>Оценки:</b>
• Работа с изображениями: Да 🟢
• Качество ответов: Высокое 🟢
• Скорость ответа: Средняя 🟡

📊 <b>Тесты:</b>
• MMLU: 92.3%
• GPQA: 75.7%
• MGSM: 89.3%
• MATH: 96.4%
• HumanEval: 92.4%
• MMMU: 78.2%
• MathVista: 73.9%
"""
    INFO_CLAUDE = "🤖 <b>Выберите Claude модель</b>, про которую вы хотите получить информацию:"
    INFO_CLAUDE_3_HAIKU = f"""
<b>{Texts.CLAUDE_3_HAIKU}</b>

<b>Создатель:</b> Anthropic

💡<b>Варианты использования:</b>
• Генерация контента
• Генерация идей
• Копирайтинг
• Общение и поддержка
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом
• Рекомендации

🚦 <b>Оценки:</b>
• Работа с изображениями: Нет 🔴
• Качество ответов: Выше среднего 🟢
• Скорость ответа: Высокая 🟢

📊 <b>Тесты:</b>
• MMLU: 80.9%
• GPQA: 41.6%
• DROP: 83.1%
• MGSM: 85.6%
• MATH: 69.2%
• HumanEval: 88.1%
"""
    INFO_CLAUDE_3_SONNET = f"""
<b>{Texts.CLAUDE_3_SONNET}</b>

<b>Создатель:</b> Anthropic

💡<b>Варианты использования:</b>
• Генерация контента
• Генерация идей
• Копирайтинг
• Общение и поддержка
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом
• Рекомендации

🚦 <b>Оценки:</b>
• Работа с изображениями: Да 🟢
• Качество ответов: Высокое 🟢
• Скорость ответа: Выше среднего 🟢

📊 <b>Тесты:</b>
• MMLU: 90.5%
• GPQA: 65.0%
• DROP: 88.3%
• MGSM: 92.5%
• MATH: 78.3%
• HumanEval: 93.7%
• MMMU: 70.4%
• MathVista: 70.7%
"""
    INFO_CLAUDE_3_OPUS = f"""
<b>{Texts.CLAUDE_3_OPUS}</b>

<b>Создатель:</b> Anthropic

💡<b>Варианты использования:</b>
• Генерация контента
• Генерация идей
• Копирайтинг
• Общение и поддержка
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом
• Рекомендации

🚦 <b>Оценки:</b>
• Работа с изображениями: Да 🟢
• Качество ответов: Выше среднего 🟢
• Скорость ответа: Среднее 🟡

📊 <b>Тесты:</b>
• MMLU: 88.2%
• GPQA: 50.4%
• DROP: 83.1%
• MGSM: 90.7%
• MATH: 60.1%
• HumanEval: 84.9%
• MMMU: 59.4%
• MathVista: 50.5%
"""
    INFO_GEMINI = "🤖 <b>Выберите Gemini модель</b>, про которую вы хотите получить информацию:"
    INFO_GEMINI_2_FLASH = f"""
<b>{Texts.GEMINI_2_FLASH}</b>

<b>Создатель:</b> Google

💡<b>Варианты использования:</b>
• Генерация контента
• Генерация идей
• Копирайтинг
• Общение и поддержка
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом
• Рекомендации

🚦 <b>Оценки:</b>
• Работа с изображениями: Да 🟢
• Качество ответов: Выше среднего 🟢
• Скорость ответа: Высокое 🟢

📊 <b>Тесты:</b>
• MMLU: 76.4%
• GPQA: 62.1%
• MATH: 89.7%
• MMMU: 70.7%
"""
    INFO_GEMINI_2_PRO = f"""
<b>{Texts.GEMINI_2_PRO}</b>

<b>Создатель:</b> Google

💡<b>Варианты использования:</b>
• Генерация контента
• Генерация идей
• Копирайтинг
• Общение и поддержка
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом
• Рекомендации

🚦 <b>Оценки:</b>
• Работа с изображениями: Да 🟢
• Качество ответов: Высокое 🟢
• Скорость ответа: Среднее 🟡

📊 <b>Тесты:</b>
• MMLU: 75.8%
• GPQA: 59.1%
• MATH: 86.5%
• MMMU: 65.9%
"""
    INFO_GEMINI_1_ULTRA = f"""
<b>{Texts.GEMINI_1_ULTRA}</b>

<b>Создатель:</b> Google

💡<b>Варианты использования:</b>
• Генерация контента
• Генерация идей
• Копирайтинг
• Общение и поддержка
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом
• Рекомендации

🚦 <b>Оценки:</b>
• Работа с изображениями: Да 🟢
• Качество ответов: Высокое 🟢
• Скорость ответа: Среднее 🟡

📊 <b>Тесты:</b>
• MMLU: 90.0%
• DROP: 82.4%
• HumanEval: 74.4%
• MATH: 53.2%
• MMMU: 59.4%
"""
    INFO_GROK = f"""
<b>{Texts.GROK}</b>

<b>Создатель:</b> X (Twitter)

💡<b>Варианты использования:</b>
• Генерация контента
• Генерация идей
• Копирайтинг
• Общение и поддержка
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом
• Рекомендации

🚦 <b>Оценки:</b>
• Работа с изображениями: Да 🟢
• Качество ответов: Высокое 🟢
• Скорость ответа: Выше среднего 🟢

📊 <b>Тесты:</b>
• MMLU: 87.5%
• GPQA: 56.0%
• MATH: 76.1%
• HumanEval: 88.4%
• MMMU: 66.1%
• MathVista: 69.0%
"""
    INFO_DEEP_SEEK = "🤖 <b>Выберите DeepSeek модель</b>, про которую вы хотите получить информацию:"
    INFO_DEEP_SEEK_V3 = f"""
<b>{Texts.DEEP_SEEK_V3}</b>

<b>Создатель:</b> DeepSeek

💡<b>Варианты использования:</b>
• Генерация контента
• Генерация идей
• Копирайтинг
• Общение и поддержка
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом
• Рекомендации

🚦 <b>Оценки:</b>
• Работа с изображениями: Нет 🔴
• Качество ответов: Выше среднего 🟢
• Скорость ответа: Высокая 🟢

📊 <b>Тесты:</b>
• MMLU: 88.5%
• GPQA: 59.1%
• DROP: 91.6%
• MGSM: 79.8%
• MATH: 90.2%
• HumanEval: 82.6%
"""
    INFO_DEEP_SEEK_R1 = f"""
<b>{Texts.DEEP_SEEK_R1}</b>

<b>Создатель:</b> DeepSeek

💡<b>Варианты использования:</b>
• Генерация контента
• Объяснение сложных концепций
• Ответы на вопросы
• Перевод с одного языка на другой
• Помощь в обучении
• Помощь в решении задач
• Работа с текстом
• Работа с кодом

🚦 <b>Оценки:</b>
• Работа с изображениями: Нет 🔴
• Качество ответов: Высокое 🟢
• Скорость ответа: Ниже средней 🟠

📊 <b>Тесты:</b>
• MMLU: 90.8%
• GPQA: 71.5%
• DROP: 92.2%
• MATH: 97.3%
"""
    INFO_PERPLEXITY = f"""
<b>{Texts.PERPLEXITY}</b>

💡<b>Варианты использования:</b>
• Поиск актуальной информации в реальном времени
• Ответы на вопросы, требующие недавних данных
• Мониторинг текущих событий
• Поиск источников для подтверждения информации
• Сравнение данных из разных источников
• Помощь в написании научных статей с актуальными данными
• Поиск ссылок на исследования, отчёты и статистику
• Быстрый поиск определений и пояснений терминов
• Составление списков литературы
• Поиск примеров для обучающих материалов
• Анализ текущих рыночных трендов
• Поиск конкурентов и их продуктов
• Мониторинг отзывов и упоминаний о компании или продукте
• Сбор данных для рекламных кампаний
• Оценка интересов целевой аудитории на основе поисковых запросов
• Поиск идей для контента
• Ответы на специфические запросы в реальном времени

🚦 <b>Оценки:</b>
• Работа с изображениями: Нет 🔴
• Качество ответов: Высокое 🟢
• Скорость ответа: Среднее 🟡
"""
    INFO_DALL_E = f"""
<b>{Texts.DALL_E}</b>

• <i>Искусство по запросу</i>: Генерация уникальных изображений по описаниям — идеально для иллюстраторов или в поисках вдохновения
• <i>Создатель рекламы</i>: Создание привлекательных изображений для рекламы или контента в социальных сетях
• <i>Образовательный инструмент</i>: Визуализация сложных идей для лучшего понимания в образовании
• <i>Дизайн интерьера</i>: Получение идей для планировки комнат или тем декора
• <i>Модный дизайн</i>: Создание дизайнов одежды или модных иллюстраций
"""
    INFO_MIDJOURNEY = f"""
<b>{Texts.MIDJOURNEY}</b>

• <i>Арт-дизайн</i>: Создание визуальных шедевров и абстракций, идеально для художников и дизайнеров в поиске уникального стиля
• <i>Архитектурное моделирование</i>: Генерация концептуальных проектов зданий и планировок пространств
• <i>Образовательный помощник</i>: Иллюстрации для обучающих материалов, улучшающие восприятие и понимание сложных тем
• <i>Дизайн интерьеров</i>: Визуализация интерьерных решений, от классики до современных трендов
• <i>Мода и стиль</i>: Разработка модных луков и аксессуаров, эксперименты с цветами и формами
"""
    INFO_STABLE_DIFFUSION = "🤖 <b>Выберите Stable Diffusion модель</b>, про которую вы хотите получить информацию:"
    INFO_STABLE_DIFFUSION_XL = f"""
<b>{Texts.STABLE_DIFFUSION_XL}</b>

• <i>Креативная иллюстрация</i>: Генерация уникальных изображений на основе текстовых запросов, подходящая для художников, дизайнеров и писателей
• <i>Концепт-арт и наброски</i>: Создание концептуальных изображений для игр, фильмов и других проектов, помогая визуализировать идеи
• <i>Стилизация изображений</i>: Преобразование существующих изображений в различные художественные стили, от комиксов до классических живописных направлений
• <i>Прототипирование дизайна</i>: Быстрая генерация визуальных концепций для логотипов, постеров или веб-дизайна
• <i>Эксперименты с художественными стилями</i>: Возможность экспериментировать с цветами, формами и текстурами для разработки новых визуальных решений
"""
    INFO_STABLE_DIFFUSION_3 = f"""
<b>{Texts.STABLE_DIFFUSION_3}</b>

• <i>Креативная иллюстрация</i>: Генерация уникальных изображений на основе текстовых запросов, подходящая для художников, дизайнеров и писателей
• <i>Концепт-арт и наброски</i>: Создание концептуальных изображений для игр, фильмов и других проектов, помогая визуализировать идеи
• <i>Стилизация изображений</i>: Преобразование существующих изображений в различные художественные стили, от комиксов до классических живописных направлений
• <i>Прототипирование дизайна</i>: Быстрая генерация визуальных концепций для логотипов, постеров или веб-дизайна
• <i>Эксперименты с художественными стилями</i>: Возможность экспериментировать с цветами, формами и текстурами для разработки новых визуальных решений
"""
    INFO_FLUX = "🤖 <b>Выберите Flux модель</b>, про которую вы хотите получить информацию:"
    INFO_FLUX_1_DEV = f"""
<b>{Texts.FLUX_1_DEV}</b>

• <i>Бесконечные вариации</i>: Генерация разнообразных изображений на основе одного запроса, каждый результат уникален
• <i>Тонкая настройка параметров</i>: Управляйте процессом создания изображения, чтобы получить точный результат под ваши требования
• <i>Генерация с элементом случайности</i>: Включите элементы случайности для создания неожиданно креативных решений
• <i>Разнообразие визуальных концепций</i>: Исследуйте широкий спектр художественных стилей и подходов, подстраивая процесс под ваши задачи
• <i>Быстрые визуальные эксперименты</i>: Возможность пробовать различные концепции и стили без ограничений, открывая новые горизонты творчества
"""
    INFO_FLUX_1_PRO = f"""
<b>{Texts.FLUX_1_PRO}</b>

• <i>Бесконечные вариации</i>: Генерация разнообразных изображений на основе одного запроса, каждый результат уникален
• <i>Тонкая настройка параметров</i>: Управляйте процессом создания изображения, чтобы получить точный результат под ваши требования
• <i>Генерация с элементом случайности</i>: Включите элементы случайности для создания неожиданно креативных решений
• <i>Разнообразие визуальных концепций</i>: Исследуйте широкий спектр художественных стилей и подходов, подстраивая процесс под ваши задачи
• <i>Быстрые визуальные эксперименты</i>: Возможность пробовать различные концепции и стили без ограничений, открывая новые горизонты творчества
"""
    INFO_LUMA_PHOTON = f"""
<b>{Texts.LUMA_PHOTON}</b>

• <i>Фотореалистичные изображения</i>: Создание высококачественных визуализаций для архитектуры, дизайна и маркетинга
• <i>Трехмерное моделирование</i>: Генерация 3D-концепций и визуализаций, идеально подходящих для презентаций и проектов
• <i>Световые эффекты и текстуры</i>: Управление сложными световыми эффектами и текстурами для получения реалистичных изображений
• <i>Креативный рендеринг</i>: Экспериментируйте с композициями и стилями для создания уникальных художественных визуализаций
• <i>Эффективность в работе</i>: Оптимально для профессионалов, стремящихся быстро получить качественный результат для проектов
"""
    INFO_RECRAFT = f"""
<b>{Texts.RECRAFT}</b>

• <i>Фотореалистичные изображения</i>: Создавайте детализированные изображения, идеально подходящие для архитектуры, дизайна и маркетинга
• <i>Работа с текстурами</i>: Добавляйте сложные текстуры и создавайте реалистичные поверхности для усиления визуального эффекта
• <i>Стилизованные визуализации</i>: Экспериментируйте с уникальными художественными стилями и композициями
• <i>Высокая скорость рендеринга</i>: Быстрое создание изображений без потери качества
• <i>Простота использования</i>: Подходит для дизайнеров, художников и профессионалов, желающих сэкономить время
"""
    INFO_FACE_SWAP = f"""
<b>{Texts.FACE_SWAP}</b>

• <i>Веселые переосмысления</i>: Посмотрите, как выглядели бы в разные исторические эпохи или в образе разных кино персонажей
• <i>Персонализированные поздравления</i>: Создайте уникальные открытки или приглашения с персонализированными изображениями
• <i>Мемы и создание контента</i>: Оживите свои социальные сети смешными или фантазийными фотографиями с заменой лица
• <i>Цифровые макияжи</i>: Экспериментируйте с новыми стрижками или стилями макияжа
• <i>Смешение со знаменитостями</i>: Совместите свое лицо с знаменитостями для забавных сравнений
"""
    INFO_PHOTOSHOP_AI = f"""
<b>{Texts.PHOTOSHOP_AI}</b>

• <i>Улучшение качества</i>: Увеличивает разрешение изображения, улучшает чёткость и устраняет шумы, делая снимок более детализированным и ярким
• <i>Реставрация фото</i>: Восстанавливает старые или поврежденные снимки, возвращая им первоначальный вид
• <i>Превращение из ЧБ в цветное</i>: Оживляет черно-белые фотографии, добавляя яркие и естественные цвета
• <i>Удаление фона</i>: Легко убирает фон с изображений, сохраняя только главный объект
"""
    INFO_MUSIC_GEN = f"""
<b>{Texts.MUSIC_GEN}</b>

• <i>Создание уникальных мелодий</i>: Превращение ваших идей в музыкальные произведения любых жанров — от классики до поп-музыки
• <i>Персонализированные звуковые дорожки</i>: Создайте звуковую дорожку для вашего следующего видеопроекта, игры или презентации
• <i>Исследование музыкальных стилей</i>: Экспериментируйте с различными музыкальными жанрами и звуками, чтобы найти ваш уникальный стиль
• <i>Обучение и вдохновение</i>: Получите новые знания о музыкальной теории и истории жанров через создание музыки
• <i>Мгновенное создание мелодий</i>: Просто введите текстовое описание или настроение, и MusicGen мгновенно превратит его в музыку
"""
    INFO_SUNO = f"""
<b>{Texts.SUNO}</b>

• <i>Изменение текста в песни</i>: Suno превращает ваши тексты в песни, подбирая мелодию и ритм под ваш стиль
• <i>Персонализированные песни</i>: Создайте уникальные песни для особых моментов, будь то личный подарок или звуковая дорожка к вашему событию
• <i>Исследуйте разнообразие музыкальных жанров</i>: Открывайте для себя новые горизонты музыки, экспериментируя с разными стилями и звуками
• <i>Музыкальное образование и вдохновение</i>: Изучите музыкальную теорию и историю жанров через практику композиции
• <i>Быстрое создание музыки</i>: Опишите свои эмоции или сценарий, и Suno немедленно оживит ваше описание в виде песни
"""
    INFO_KLING = f"""
<b>{Texts.KLING}</b>

• <i>Генерация видео по описанию</i>: Опишите идею, и Kling создаст впечатляющий видеоролик
• <i>Работа с уникальными стилями</i>: Используйте разнообразные стили, чтобы подчеркнуть индивидуальность вашего видео
• <i>Динамические переходы</i>: Автоматическое добавление плавных и эффектных переходов между сценами
• <i>Креативные визуальные эффекты</i>: Создавайте видео с современными эффектами для ваших проектов
• <i>Контент за минуты</i>: Создавайте впечатляющие видеоролики за короткий срок, не требуя навыков видеомонтажа
"""
    INFO_RUNWAY = f"""
<b>{Texts.RUNWAY}</b>

• <i>Создание коротких видеороликов</i>: Опишите идею или сценарий, приложите фото и Runway создаст уникальный видеоклип
• <i>Генерация видео по фото + тексту</i>: Преобразуйте картинку и текстовое описание в динамичные видео
• <i>Анимация и визуальные эффекты</i>: Создавайте визуально привлекательные и креативные анимации на основе ваших идей
• <i>AI-контент для соцсетей</i>: Быстро создавайте захватывающие видео для платформ и проектов
• <i>Эксперименты с видеоформатами</i>: Исследуйте возможности AI для создания новых стилей и видеоконтента
"""
    INFO_LUMA_RAY = f"""
<b>{Texts.LUMA_RAY}</b>

• <i>Высококачественные видеоролики</i>: Создание реалистичных и динамичных видео на основе описания
• <i>3D-анимация</i>: Генерация впечатляющих трёхмерных анимаций для ваших проектов
• <i>Кинематографический стиль</i>: Применение эффектов и композиций, характерных для профессионального кино
• <i>Визуальная магия</i>: Применяйте современные технологии для создания качественного контента
• <i>Новые видеоформаты</i>: Экспериментируйте с новыми стилями и подходами в создании видеоконтента
"""
    INFO_PIKA = f"""
<b>{Texts.PIKA}</b>

• <i>Генерация видео</i>: Опишите вашу идею, и Pika создаст уникальный видеоролик за считанные минуты
• <i>Стилизация видео</i>: Применяйте художественные стили, чтобы сделать ваше видео оригинальным и запоминающимся
• <i>Добавление анимаций</i>: Превращайте статичные элементы в динамичные сцены с плавными движениями
• <i>Интерактивный контент</i>: Создавайте видео, которые удерживают внимание и вовлекают зрителей
• <i>Контент без усилий</i>: С лёгкостью создавайте профессиональные видеоролики, даже если вы новичок
"""

    # Kling
    KLING_MODE_STANDARD = "🔸 Стандарт"
    KLING_MODE_PRO = "🔹 Про"

    # Language
    LANGUAGE = "Язык:"
    LANGUAGE_CHOSEN = "Выбранный язык: Русский 🇷🇺"

    # Maintenance Mode
    MAINTENANCE_MODE = "🤖 Я в режиме тех. обслуживания. Пожалуйста, подождите, немного 🛠"

    # Midjourney
    MIDJOURNEY_INFO = """
<b>Расположение картинок:</b>
┌1️⃣2️⃣┐
└3️⃣4️⃣┘

<b>U</b> — Увеличение картинки
<b>V</b> — Похожие варианты картинки
"""
    MIDJOURNEY_ALREADY_CHOSE_UPSCALE = "Вы уже выбирали эту картинку, попробуйте новую 🙂"

    # Model
    MODEL = "Чтобы <b>сменить модель</b>, нажмите на кнопку ниже 👇"
    MODEL_CHANGE_AI = "🤖 Поменять AI модель"
    MODEL_CHOOSE_CHAT_GPT = "Для выбора <b>ChatGPT 💭</b> модели нажмите на кнопку ниже 👇"
    MODEL_CHOOSE_CLAUDE = "Для выбора <b>Claude 📄</b> модели нажмите на кнопку ниже 👇"
    MODEL_CHOOSE_GEMINI = "Для выбора <b>Gemini ✨</b> модели нажмите на кнопку ниже 👇"
    MODEL_CHOOSE_DEEP_SEEK = "Для выбора <b>DeepSeek 🐳</b> модели нажмите на кнопку ниже 👇"
    MODEL_CHOOSE_STABLE_DIFFUSION = "Для выбора <b>Stable Diffusion 🎆</b> модели нажмите на кнопку ниже 👇"
    MODEL_CHOOSE_FLUX = "Для выбора <b>Flux 🫐</b> модели нажмите на кнопку ниже 👇"
    MODEL_CONTINUE_GENERATING = "Продолжить генерацию"
    MODEL_ALREADY_MAKE_REQUEST = "⚠️ Вы уже сделали запрос. Пожалуйста, подождите"
    MODEL_READY_FOR_NEW_REQUEST = "😌 Вы можете задать следующий запрос"
    MODEL_SHOW_QUOTA = "🔄 Показать лимиты подписки"
    MODEL_SWITCHED_TO_AI_MANAGE = "⚙️ Управление"
    MODEL_SWITCHED_TO_AI_MANAGE_INFO = "Выберите, что хотите сделать с моделью:"
    MODEL_SWITCHED_TO_AI_SETTINGS = "🛠️ Перейти в настройки"
    MODEL_SWITCHED_TO_AI_INFO = "ℹ️ Узнать подробнее"
    MODEL_SWITCHED_TO_AI_EXAMPLES = "💡 Показать примеры запросов"
    MODEL_ALREADY_SWITCHED_TO_THIS_MODEL = """
🔄 <b>Всё осталось как было!</b>

Вы выбрали ту же модель, которая у вас сейчас
"""

    @staticmethod
    def model_switched(model_name: str, model_type: ModelType, model_info: dict):
        if model_type == ModelType.TEXT:
            model_role = model_info.get('role').split(' ')
            model_role = ' '.join(model_role[1:] + [model_role[0]])
            facts = f"""<b>Факты и настройки:</b>
📅 Знания до: {model_info.get('training_data')}
📷 Работа с фото: {'Да ✅' if model_info.get('support_photos', False) else 'Нет ❌'}
{Russian.VOICE_MESSAGES}: {'Вкл. ✅' if model_info.get(UserSettings.TURN_ON_VOICE_MESSAGES, False) else 'Выкл. ❌'}
🎭 Роль: {model_role}"""
        elif model_type == ModelType.SUMMARY:
            model_focus = model_info.get(UserSettings.FOCUS, VideoSummaryFocus.INSIGHTFUL)
            if model_focus == VideoSummaryFocus.INSIGHTFUL:
                model_focus = ' '.join(reversed(Russian.VIDEO_SUMMARY_FOCUS_INSIGHTFUL.split(' ', 1)))
            elif model_focus == VideoSummaryFocus.FUNNY:
                model_focus = ' '.join(reversed(Russian.VIDEO_SUMMARY_FOCUS_FUNNY.split(' ', 1)))
            elif model_focus == VideoSummaryFocus.ACTIONABLE:
                model_focus = ' '.join(reversed(Russian.VIDEO_SUMMARY_FOCUS_ACTIONABLE.split(' ', 1)))
            elif model_focus == VideoSummaryFocus.CONTROVERSIAL:
                model_focus = ' '.join(reversed(Russian.VIDEO_SUMMARY_FOCUS_CONTROVERSIAL.split(' ', 1)))

            model_format = model_info.get(UserSettings.FORMAT, VideoSummaryFormat.LIST)
            if model_format == VideoSummaryFormat.LIST:
                model_format = ' '.join(reversed(Russian.VIDEO_SUMMARY_FORMAT_LIST.split(' ', 1)))
            elif model_format == VideoSummaryFormat.FAQ:
                model_format = ' '.join(reversed(Russian.VIDEO_SUMMARY_FORMAT_FAQ.split(' ', 1)))

            model_amount = model_info.get(UserSettings.AMOUNT, VideoSummaryAmount.AUTO)
            if model_amount == VideoSummaryAmount.AUTO:
                model_amount = ' '.join(reversed(Russian.VIDEO_SUMMARY_AMOUNT_AUTO.split(' ', 1)))
            elif model_amount == VideoSummaryAmount.SHORT:
                model_amount = ' '.join(reversed(Russian.VIDEO_SUMMARY_AMOUNT_SHORT.split(' ', 1)))
            elif model_amount == VideoSummaryAmount.DETAILED:
                model_amount = ' '.join(reversed(Russian.VIDEO_SUMMARY_AMOUNT_DETAILED.split(' ', 1)))

            facts = f"""<b>Факты и настройки:</b>
{Russian.SETTINGS_FOCUS}: {model_focus}
{Russian.SETTINGS_FORMAT}: {model_format}
{Russian.SETTINGS_AMOUNT}: {model_amount}
{Russian.VOICE_MESSAGES}: {'Вкл. ✅' if model_info.get(UserSettings.TURN_ON_VOICE_MESSAGES, False) else 'Выкл. ❌'}"""
        elif model_type == ModelType.IMAGE:
            model_version = get_model_version(model_info)
            model_version_info = f'\n{Russian.SETTINGS_VERSION}: {model_version}' if model_version else ''
            facts = f"""<b>Факты и настройки:</b>{model_version_info}
📷 Работа с фото: {'Да ✅' if model_info.get('support_photos', False) else 'Нет ❌'}
{Russian.SETTINGS_ASPECT_RATIO}: {'Пользовательское' if model_info.get(UserSettings.ASPECT_RATIO, AspectRatio.CUSTOM) == AspectRatio.CUSTOM else model_info.get(UserSettings.ASPECT_RATIO)}
{Russian.SETTINGS_SEND_TYPE}: {'Документ 📄' if model_info.get(UserSettings.SEND_TYPE, SendType.IMAGE) == SendType.DOCUMENT else 'Картинка 🖼'}"""
        elif model_type == ModelType.MUSIC:
            model_version = get_model_version(model_info)
            model_version_info = f'\n{Russian.SETTINGS_VERSION}: {model_version}' if model_version else ''
            facts = f"""<b>Факты и настройки:</b>{model_version_info}
{Russian.SETTINGS_SEND_TYPE}: {'Видео 📺' if model_info.get(UserSettings.SEND_TYPE, SendType.AUDIO) == SendType.VIDEO else 'Аудио 🎤'}"""
        elif model_type == ModelType.VIDEO:
            model_version = get_model_version(model_info)
            model_version_info = f'\n{Russian.SETTINGS_VERSION}: {model_version}' if model_version else ''
            facts = f"""<b>Факты и настройки:</b>{model_version_info}
📷 Работа с фото: {'Да ✅' if model_info.get('support_photos', False) else 'Нет ❌'}
{Russian.SETTINGS_ASPECT_RATIO}: {'Пользовательское' if model_info.get(UserSettings.ASPECT_RATIO, AspectRatio.CUSTOM) == AspectRatio.CUSTOM else model_info.get(UserSettings.ASPECT_RATIO)}
{Russian.SETTINGS_DURATION}: {model_info.get(UserSettings.DURATION, 5)}
{Russian.SETTINGS_SEND_TYPE}: {'Документ 📄' if model_info.get(UserSettings.SEND_TYPE, SendType.VIDEO) == SendType.DOCUMENT else 'Видео 📺'}"""
        else:
            facts = f"<b>Факты и настройки:</b> Скоро 🔜"

        return f"""
<b>{model_name}</b>
👆 Выбранная модель

{facts}

Чтобы <b>перейти к настройкам</b>, <b>узнать больше про модель</b> и <b>посмотреть примеры запросов</b>, нажмите на кнопку ниже 👇
"""

    @staticmethod
    def model_text_processing_request() -> str:
        texts = [
            "Сейчас консультируюсь с моим цифровым хрустальным шаром, чтобы найти лучший ответ... 🔮",
            "Минуточку, тренирую своих хомячков, чтобы они сгенерировали ваш ответ... 🐹",
            "Роюсь в своей цифровой библиотеке в поисках идеального ответа. Немного терпения... 📚",
            "Подождите, я вызываю своего внутреннего гуру ИИ для вашего ответа... 🧘",
            "Подождите, пока я консультируюсь с повелителями интернета для вашего ответа... 👾",
            "Собираю мудрость веков... или, по крайней мере, то, что могу найти в интернете... 🌐",
            "Секундочку, надеваю свою шляпу для размышлений... А, вот так лучше. Теперь давайте посмотрим... 🎩",
            "Закатываю свои виртуальные рукава и приступаю к делу. Ваш ответ уже на подходе... 💪",
            "Работаю на полную мощность! Мои ИИ-шестеренки крутятся, чтобы принести ваш ответ... 🚂",
            "Погружаюсь в океан данных, чтобы выловить ваш ответ. Скоро вернусь... 🎣",
            "Консультируюсь со своими виртуальными эльфами. Обычно они отлично находят ответы... 🧝",
            "Включаю сверхсветовой привод для быстрого поиска ответа. Держитесь крепче... 🚀",
            "Нахожусь на кухне и готовлю свежую партию ответов. Этот будет вкусным... 🍳",
            "Совершаю быструю поездку в облако и обратно. Надеюсь принести несколько умных капель информации... ☁️",
            "Сажаю ваш вопрос в моем цифровом саду. Посмотрим, что вырастет... 🌱",
            "Прокачиваю свои виртуальные мышцы для мощного ответа... 💪",
            "Вжух — и у меня запускается процесс вычислений! Ответ будет скоро готов... 🪄",
            "Мои цифровые совы разлетаются в поисках мудрого ответа. Скоро вернутся с добычей... 🦉",
            "Тут в киберпространстве гроза идей, ловлю молнии для ответа... ⚡️",
            "Моя команда цифровых енотов сейчас ищет подходящий ответ. Они хороши в этом... 🦝",
            "Перебираю информацию, как белка орешки, чтобы найти самый ценный... 🐿️",
            "Надеваю своё цифровое плащ-пальто и иду на поиски ответа... 🕵️‍♂️",
            "Загружаю новый пакет идей из космоса. Ответ приземлится через пару секунд... 🚀",
            "Подождите, раскладываю карты данных на виртуальном столе. Готовлюсь к точному <s>предсказанию</s> ответу... 🃏",
            "Мои виртуальные корабли уже плывут по морю информации. Ответ на горизонте... 🚢",
        ]

        return random.choice(texts)

    @staticmethod
    def model_image_processing_request() -> str:
        texts = [
            "Собираю звездную пыль для создания вашего космического шедевра... 🌌",
            "Мешаю палитру цифровых красок для вашего шедевра... 🎨",
            "Окунаюсь в виртуальные чернила, чтобы набросать ваше видение... 🖌️",
            "Призываю музы AI для вдохновляющего рисунка... 🌠",
            "Создаю пиксели до совершенства, мгновение... 🎭",
            "Готовлю визуальный пир для ваших глаз... 🍽️",
            "Консультируюсь с цифровым Да Винчи по вашему артистическому запросу... 🎭",
            "Протираю пыль с цифрового мольберта для вашего творческого запроса... 🖼️️",
            "Творю визуальное заклинание в котле AI... 🔮",
            "Активирую виртуальный холст.Готовьтесь к искусству... 🖼️",
            "Собираю ваши идеи в галерею пикселей... 👨‍🎨",
            "Отправляюсь в цифровое сафари, чтобы запечатлеть ваше художественное видение... 🦁",
            "Запускаю AI - двигатели искусства, ожидайте... 🏎️",
            "Окунаюсь в бассейн цифрового воображения... 🏊‍",
            "Готовлю визуальную симфонию на кухне AI... 🍳",
            "Подгоняю облака креатива для создания вашего визуального шедевра... ☁️",
            "Собираю цифровые кисти и краски, чтобы оживить ваше видение... 🎨",
            "Призываю пиксельных драконов для создания эпичного изображения... 🐉",
            "Собираю цифровых пчел, чтобы они собрали нектар для вашего визуального цветения... 🐝",
            "Надеваю свою цифровую шляпу художника и начинаю работать над вашим шедевром... 👒",
            "Погружаю пиксели в магический раствор, чтобы они засияли шедевром... 🧪",
            "Леплю ваше изображение из глины воображения, скоро будет шедевр... 🏺",
            "Мои виртуальные эльфы уже рисуют ваше изображение... 🧝‍♂️",
            "Виртуальные черепахи несут ваше изображение через море данных... 🐢",
            "Виртуальные котики уже рисуют ваш шедевр лапками... 🐱",
        ]

        text = random.choice(texts)
        text += "\n\n⚠️ <i>Генерация может занять до 3 минут</i>"

        return text

    @staticmethod
    def model_face_swap_processing_request() -> str:
        texts = [
            "Переношусь в измерение смены лиц... 👤",
            "Смешиваю и подбираю лица, как цифровой Пикассо... 🧑‍🎨",
            "Меняю лица быстрее, чем хамелеон меняет цвета... 🦎",
            "Пробуждаю магию слияния лиц... ✨",
            "Произвожу алхимию лиц, меняю идентичность... 🧬",
            "Завожу машину для смены лиц... 🤖",
            "Готовлю зелье для трансформации лица... 👩‍🔬",
            "Творю чары в мире заклинаний лиц... 🧚‍",
            "Руковожу симфонией черт лица... 🎼",
            "Леплю новые лица в моей цифровой арт - студии... 🎨",
            "Варю котел волшебства смены лиц... 🔮",
            "Строю лица, как великий архитектор... 🏗️",
            "Начинаю мистический поиск идеального сочетания лиц... 🔍",
            "Запускаю ракету приключений по смене лиц... 🚀",
            "Отправляюсь в галактическое путешествие смены лиц... 👽",
        ]

        text = random.choice(texts)
        text += "\n\n⚠️ <i>Генерация может занять до 5 минут</i>"

        return text

    @staticmethod
    def model_music_processing_request() -> str:
        texts = [
            "Запускаю музыкальный генератор, держитесь за уши... 👂",
            "Смешиваю ноты как диджей на вечеринке... 🕺",
            "Волшебник мелодии в деле, готовьтесь к магии... 🧙‍",
            "Создаю музыку, которая заставит даже роботов танцевать... 💃",
            "Музыкальная лаборатория в действии, сейчас будет горячо... 🔥",
            "Ловлю волну вдохновения и превращаю её в звуки... 🌊",
            "Поднимаюсь на музыкальные вершины, ожидайте... 🏔️",
            "Творю нечто, что еще никогда не слышали уши... 👂",
            "Время погрузиться в океан гармонии и ритма... 🌊",
            "Открываю дверь в мир, где музыка создает реальность... 🌍",
            "Взламываю коды композиции, чтобы создать что - то уникальное... 🎶",
            "Творю мелодии, как шеф - повар шедевры кулинарии... 🍽️",
            "Устраиваю праздник на клавишах, каждая нота — гость... 🎹",
            "Прокладываю путь через мелодический лабиринт... 🌀",
            "Превращаю вибрации воздуха в волшебные звуки... 🌬️",
        ]

        text = random.choice(texts)
        text += "\n\n⚠️ <i>Генерация может занять до 10 минут</i>"

        return text

    @staticmethod
    def model_video_processing_request() -> str:
        texts = [
            "Загружаю кинопремьеру, почти готово... 🍿",
            "Ракета видеотворчества взлетает! Пристегните ремни... 🚀",
            "Кадры оживают, камера, мотор... 🎬",
            "Создаю шедевр кадр за кадром... 🎥",
            "Не видео, а кинематографическое чудо на подходе... 🎞️",
            "Составляю пазл из лучших кадров для вашего ВАУ... 🤩",
            "Соединяю пиксели — ожидайте видео - шедевр... 🎇",
            "Ловлю лучшие кадры на крючок, шедевр в процессе... 🎣",
            "Монтажный стол в огне, создаю видеошедевр... 🔥",
            "Загружаю видеоконтент в ваше измерение... 🎞️",
            "AI пчёлы трудятся над вашим видеомёдом...Готовьтесь к сладкому результату... 🐝",
            "Волшебный проектор уже запускается... ✨",
            "Пицца готовится в духовке...ой, нет, ваше видео... 🍕",
            "Творю визуальные заклинания, видео будет магическим... 🎩",
            "Везу ваше видео по рельсам творчества... 🚉",
        ]

        text = random.choice(texts)
        text += "\n\n⚠️ <i>Генерация может занять до 20 минут</i>"

        return text

    @staticmethod
    def model_wait_for_another_request(seconds: int) -> str:
        word = Russian.morph.parse('секунда')[0]
        return f"⏳ Пожалуйста, подождите ещё <b>{seconds} {word.make_agree_with_number(seconds).word}</b> перед отправкой следующего запроса"

    @staticmethod
    def model_reached_usage_limit():
        hours_word = Russian.morph.parse('час')[0]
        minutes_word = Russian.morph.parse('минута')[0]
        hours, minutes = get_time_until_limit_update()

        return f"""
🚨 <b>Квота исчерпана!</b>

Ежедневный лимит обновится через <i>{hours} {hours_word.make_agree_with_number(hours).word} {minutes} {minutes_word.make_agree_with_number(minutes).word}</i> 🔄

Если вы не хотите ждать, у меня есть решение:
"""

    @staticmethod
    def model_restricted(model: str):
        return f"""
🔒 <b>Вы попали в зону VIP!</b>

{model} не входит в вашу текущую подписку

Выберите действие:
"""

    @staticmethod
    def model_unresolved_request(model: str):
        return f"""
🤒 <b>Я не получил ответа от {model}</b>

Можете повторить ещё раз или выбрать действие:
"""

    @staticmethod
    def model_text_info():
        return f"""
📕 <b>Инструкция</b>

<b>Мои возможности:</b>
💡 Создание контента/идей
🌍 Перевод и локализация
💻 Написание и отладка кода
📊 Решение задач
🌟 И многое другое!

<b>Примеры запросов:</b>
💡 Напиши пост о путешествиях
🌍 Переведи «Привет» на английский
💻 Как создать свой сайт?
📊 Реши уравнение: 3x² — 5x + 2 = 0

<b>Просто напишите ваш запрос 👇</b>
"""

    @staticmethod
    def model_image_info():
        return f"""
📕 <b>Инструкция</b>

<b>Мои возможности:</b>
🖼 Генерация креативных картинок
🎭 Создание уникальных персонажей
🖍 Работа с логотипами и дизайном
🎨 Стилизация существующих фото
🌟 И многое другое!

<b>Примеры запросов:</b>
🖼 Нарисуй дракона в тумане
🎭 Придумай супергероя для комикса
🖍 Создай логотип для стартапа
🎨 Добавь эффект искр на фото

<b>Просто напишите ваш запрос 👇</b>
"""

    @staticmethod
    def model_video_info():
        return f"""
📕 <b>Инструкция</b>

<b>Мои возможности:</b>
🎬 Генерация видео
🖼 Анимация изображений
🌟 И многое другое!

<b>Примеры запросов:</b>
🎬 Создай ролик взрыва в космосе
🖼 Оживи старую фотографию [фото]

<b>Просто напишите ваш запрос 👇</b>
"""

    MODELS_TEXT = "🔤 Текстовые модели"
    MODELS_SUMMARY = "📝 Резюме модели"
    MODELS_IMAGE = "🖼 Графические модели"
    MODELS_MUSIC = "🎵 Музыкальные модели"
    MODELS_VIDEO = "📹 Видео модели"

    # MusicGen
    MUSIC_GEN_INFO = """
🎺 <b>Инструкция к MusicGen</b>

Я готов преобразовать ваши слова и описания в уникальные мелодии 🎼

Напишите мне, какую музыку вы хотите создать: <b>опишите её стиль, настроение и инструменты</b>
"""
    MUSIC_GEN_TYPE_SECONDS = """
⏳ <b>Сколько секунд в вашей симфонии?</b>

<i>Каждые 10 секунд расходуют 1 генерацию</i> 🎼

Напишите или выберите продолжительность вашей композиции в секундах:
"""
    MUSIC_GEN_MIN_ERROR = """
🤨 <b>Постойте!</b>

Вы хотите запросить меньше 10 секунд!

Чтобы продолжить, <b>отправьте число больше или равное 10</b>
"""
    MUSIC_GEN_MAX_ERROR = """
🤨 <b>Постойте!</b>

Вы хотите запросить больше 10 минут, я пока не умею создавать больше!

Чтобы начать волшебство, <b>введите число меньше 600</b>
"""
    MUSIC_GEN_SECONDS_10 = "🔹 10 секунд"
    MUSIC_GEN_SECONDS_30 = "🔹 30 секунд"
    MUSIC_GEN_SECONDS_60 = "🔹 60 секунд (1 минута)"
    MUSIC_GEN_SECONDS_180 = "🔹 180 секунд (3 минуты)"
    MUSIC_GEN_SECONDS_300 = "🔹 300 секунд (5 минут)"
    MUSIC_GEN_SECONDS_600 = "🔹 600 секунд (10 минут)"

    @staticmethod
    def music_gen_forbidden_error(available_seconds: int) -> str:
        word = Russian.morph.parse('секунда')[0]

        return f"""
🚧 <b>Упс, небольшая проблема!</b>

У вас осталось только <b>{available_seconds} {word.make_agree_with_number(available_seconds).word}</b> в вашем арсенале

Введите число поменьше, или воспользуйтесь /buy для неограниченных возможностей
"""

    # Notify about quota
    @staticmethod
    def notify_about_quota(
        subscription_limits: dict,
    ) -> str:
        texts = [
            f"""
🤖 <b>Эй, это я! Помнишь меня?</b>

🤓 Я тут, чтобы <b>напомнить</b> тебе про твои ежедневные квоты:
• <b>{format_number(subscription_limits[Quota.CHAT_GPT4_OMNI_MINI])} текстовых запросов</b> ждут, чтобы превратиться в твои шедевры
• <b>{format_number(subscription_limits[Quota.EIGHTIFY])} суммаризация видео</b> поможет быстро понять суть роликов
• <b>{format_number(subscription_limits[Quota.STABLE_DIFFUSION_XL])} графическая возможность</b> готова оживить твои идеи

🔥 Не дай им пропасть впустую — <b>начни прямо сейчас!</b>
""",
            f"""
🤖 <b>Привет, это Фьюзи, твой личный помощник</b>!

😢 Я заметил, что ты давно не использовал свои квоты, на всякий случай <b>напомню</b>, что каждый день у тебя есть:
• <b>{format_number(subscription_limits[Quota.CHAT_GPT4_OMNI_MINI])} текстовых запросов</b> для твоих идей
• <b>{format_number(subscription_limits[Quota.EIGHTIFY])} суммаризация видео</b>, чтобы сэкономить твоё время
• <b>{format_number(subscription_limits[Quota.STABLE_DIFFUSION_XL])} картинка</b>, которая оживит твои мысли

✨ <b>Давай творить!</b> Я вот готов прямо сейчас!
""",
            f"""
🤖 <b>Это Фьюзи, твой личный цифровой сотрудник, с важным напоминанием!</b>

🤨 Ты ведь знаешь, что <b>у тебя есть</b>:
• <b>{format_number(subscription_limits[Quota.CHAT_GPT4_OMNI_MINI])} текстовых запросов</b> для твоих ярких мыслей
• <b>{format_number(subscription_limits[Quota.EIGHTIFY])} резюме видео</b>, чтобы сразу понять суть
• <b>{format_number(subscription_limits[Quota.STABLE_DIFFUSION_XL])} изображение</b>, чтобы визуализировать идеи

🔋 Я уже заряжен, осталось только <b>начать творить</b>!
""",
            f"""
🤖 <b>Это снова я! Я соскучился...</b>

😢 Я тут подумал... А ведь <b>твои квоты тоже скучают</b>:
• <b>{format_number(subscription_limits[Quota.CHAT_GPT4_OMNI_MINI])} вдохновляющих текстовых запросов</b> ждут своего часа
• <b>{format_number(subscription_limits[Quota.EIGHTIFY])} пересказ видео</b>, которое превратится в короткие инсайты
• <b>{format_number(subscription_limits[Quota.STABLE_DIFFUSION_XL])} визуальная идея</b> готова ожить

💡 Дай мне шанс помочь тебе <b>создать нечто невероятное</b>!
""",
            f"""
🤖 <b>Привет, это Фьюзи!</b> Твои квоты не используют себя сами, ты же понимаешь?

🫤 <b>Напоминаю, что у тебя есть:</b>
• <b>{format_number(subscription_limits[Quota.CHAT_GPT4_OMNI_MINI])} текстовых запросов</b>, которые могут стать началом успеха
• <b>{format_number(subscription_limits[Quota.EIGHTIFY])} резюме видео</b>, чтобы раскрыть суть за секунды
• <b>{format_number(subscription_limits[Quota.STABLE_DIFFUSION_XL])} картинка</b>, которая нарисует твою фантазию

✨ <b>Время создавать</b>, а я здесь, чтобы помочь. Давай начнём!
""",
        ]

        return random.choice(texts)

    NOTIFY_ABOUT_QUOTA_TURN_OFF = "🔕 Отключить уведомления"
    NOTIFY_ABOUT_QUOTA_TURN_OFF_SUCCESS = "🎉 Уведомления успешно отключены"

    # Open
    OPEN_SETTINGS = "⚙️ Перейти к настройкам"
    OPEN_BONUS_INFO = "🎁 Перейти к бонусному балансу"
    OPEN_BONUS_FREE_INFO = "🎁 Получить доступ бесплатно"
    OPEN_BUY_SUBSCRIPTIONS_INFO = "💎 Оформить подписку"
    OPEN_BUY_SUBSCRIPTIONS_TRIAL_INFO = "💎 Оформить пробный период"
    OPEN_BUY_PACKAGES_INFO = "🛍 Приобрести пакеты"

    # Package
    PACKAGE = "🛍 Пакет"
    PACKAGE_SUCCESS = """
🎉 <b>Оплата прошла успешно!</b>

Вы успешно разблокировали силу выбранного пакета 🎢

Давайте творить чудеса ✨
"""
    PACKAGE_QUANTITY_MIN_ERROR = """
🚨 <b>Ой!</b>

Сумма меньше минимального порога

Выберите количество пакетов, соответствующее или превышающее минимальную требуемую сумму 🔄
"""
    PACKAGE_QUANTITY_MAX_ERROR = """
🚨 <b>Ой!</b>

Введенное число выше, чем вы можете приобрести

<b>Введите значение поменьше или соответствующее вашему балансу</b> 🔄
"""

    @staticmethod
    def package_info(currency: Currency, cost: str, gift_packages: list[Product]) -> str:
        if currency == Currency.USD:
            cost = f"{Currency.SYMBOLS[currency]}{cost}"
            gift_packages_sum = f"{Currency.SYMBOLS[currency]}4"
        else:
            cost = f"{cost}{Currency.SYMBOLS[currency]}"
            gift_packages_sum = f"400{Currency.SYMBOLS[currency]}"

        gift_packages_info = f"\n\n🎁 <span class='tg-spoiler'>При покупке от {gift_packages_sum} — получите эти пакеты в подарок:</span>"
        for gift_package in gift_packages:
            gift_packages_info += f"\n<span class='tg-spoiler'>{gift_package.names.get(LanguageCode.RU)}</span>"

        return f"""
🛍 <b>Пакеты</b>

<b>1 монета 🪙 = {cost}</b>{gift_packages_info if len(gift_packages) > 0 else ''}

Чтобы выбрать пакет, нажмите кнопку:
"""

    @staticmethod
    def package_choose_min(name: str) -> str:
        return f"""
Вы выбрали пакет <b>{name}</b>

<b>Выберите или отправьте количество</b>, которое вы хотели бы приобрести
"""

    @staticmethod
    def package_confirmation(package_name: str, package_quantity: int, currency: Currency, price: str) -> str:
        left_price_part = Currency.SYMBOLS[currency] if currency == Currency.USD else ''
        right_price_part = '' if currency == Currency.USD else Currency.SYMBOLS[currency]
        word = Russian.morph.parse('пакет')[0]

        return f"Вы собираетесь купить {package_quantity} {word.make_agree_with_number(package_quantity).word} <b>{package_name}</b> за {left_price_part}{price}{right_price_part}"

    @staticmethod
    def payment_package_description(user_id: str, package_name: str, package_quantity: int):
        word = Russian.morph.parse('пакет')[0]

        return f"Оплата {package_quantity} {word.make_agree_with_number(package_quantity).word} {package_name} для пользователя: {user_id}"

    PACKAGES = "🛍 Пакеты"
    PACKAGES_SUCCESS = """
🎉 <b>Оплата прошла успешно!</b>

Вы успешно разблокировали силу выбранных пакетов 🎢

Давайте творить чудеса ✨
"""
    PACKAGES_END = """
🕒 <b>Ох-ох</b>

Время одного или нескольких пакетов истекло! ⌛

Чтобы продолжить, посмотрите мои предложения нажав на кнопку снизу:
"""

    @staticmethod
    def packages_description(user_id: str):
        return f"Оплата пакетов из корзины для пользователя: {user_id}"

    # Payment
    PAYMENT_BUY = """
🛒 <b>Магазин</b>

💳 <b>Подписки</b>
Получите полный доступ ко всем нейросетям и инструментам. Общение, изображения, музыка, видео и многое другое — всё включено!

🛍 <b>Пакеты</b>
Только то, что нужно! Выбирайте определённое количество запросов и платите только за то, что используете

Выберите нажав на кнопку ниже 👇
"""
    PAYMENT_CHANGE_CURRENCY = "💱 Изменить валюту"
    PAYMENT_YOOKASSA_PAYMENT_METHOD = "🪆 ЮKassa"
    PAYMENT_STRIPE_PAYMENT_METHOD = "🌍 Stripe"
    PAYMENT_TELEGRAM_STARS_PAYMENT_METHOD = "⭐️ Telegram Stars"
    PAYMENT_CHOOSE_PAYMENT_METHOD = """
<b>Выберите способ оплаты:</b>

🪆 <b>ЮKassa (РФ Карты)</b>
(Visa | MasterCard | МИР | ЮMoney | SberPay | T-Pay и др.)

🌍 <b>Stripe (Международные Карты)</b>
(Visa | MasterCard | AmEx | UnionPay | Google Pay | Apple Pay и др.)

⭐️ <b>Telegram Stars (Валюта в Telegram)</b>
"""
    PAYMENT_PROCEED_TO_PAY = "🌐 Перейти к оплате"
    PAYMENT_PROCEED_TO_CHECKOUT = "💳 Перейти к оформлению"
    PAYMENT_DISCOUNT = "💸 Скидка"
    PAYMENT_NO_DISCOUNT = "Нет скидки"

    @staticmethod
    def payment_purchase_minimal_price(currency: Currency, current_price: str):
        left_part_price = Currency.SYMBOLS[currency] if currency == Currency.USD else ''
        right_part_price = '' if currency == Currency.USD else Currency.SYMBOLS[currency]
        return f"""
<b>😕 Ох-ох...</b>

Для совершения покупки общая сумма должна быть равной или больше, чем <b>{left_part_price}{1 if currency == Currency.USD else 50}{right_part_price}</b>

Сейчас сумма покупки составляет: <b>{left_part_price}{current_price}{right_part_price}</b>
"""

    # Perplexity
    PERPLEXITY_INFO = """
📕 <b>Инструкция</b>

<b>Мои возможности:</b>
🌐 Поиск информации
📊 Анализ источников
🔗 Предоставление ссылок
🌟 И многое другое!

<b>Примеры запросов:</b>
🌐 Каковы последствия глобального потепления в 2025 году?
📊 Сравни исследования о влиянии кофеина на здоровье
🔗 Какие лучшие книги про психологию?

<b>Просто напишите ваш запрос 👇</b>
"""

    # Photoshop AI
    PHOTOSHOP_AI_INFO = """
🪄 <b>Photoshop AI</b>

В этой модели собраны AI-инструменты для редактирования и стилизации изображений

Выберите действие нажав на кнопку ниже 👇
"""
    PHOTOSHOP_AI_UPSCALE = "⬆️ Улучшение качества"
    PHOTOSHOP_AI_UPSCALE_INFO = """
⬆️ <b>Инструмент улучшает качество исходного изображения</b>

Чтобы улучшить качество картинки, отправьте мне своё изображение
"""
    PHOTOSHOP_AI_RESTORATION = "🖌 Реставрация"
    PHOTOSHOP_AI_RESTORATION_INFO = """
🖌 <b>Инструмент обнаруживает царапины/порезы на исходном изображении и убирает их</b>

Чтобы убрать царапины/порезы, отправьте мне своё изображение
"""
    PHOTOSHOP_AI_COLORIZATION = "🌈 Раскрашивание"
    PHOTOSHOP_AI_COLORIZATION_INFO = """
🌈 <b>Инструмент позволяет добавить цвет в черно-белые изображения</b>

Чтобы превратить чёрно-белую фотографию в цветную, отправьте мне своё изображение
"""
    PHOTOSHOP_AI_REMOVE_BACKGROUND = "🗑 Удаление фона"
    PHOTOSHOP_AI_REMOVE_BACKGROUND_INFO = """
🗑 <b>Инструмент позволяет удалить фон на изображении</b>

Чтобы удалить фон, отправьте мне своё изображение
"""

    # Profile
    @staticmethod
    def profile(
        subscription_name: str,
        subscription_status: SubscriptionStatus,
        current_model: str,
        renewal_date,
    ) -> str:
        if subscription_status == SubscriptionStatus.CANCELED:
            subscription_info = f"📫 <b>Статус подписки:</b> Отменена. Действует до {renewal_date}"
        elif subscription_status == SubscriptionStatus.TRIAL:
            subscription_info = f"📫 <b>Статус подписки:</b> Бесплатный период"
        else:
            subscription_info = "📫 <b>Статус подписки:</b> Активна"

        return f"""
👤 <b>Профиль</b>

─────────────

🤖 <b>Текущая модель:</b> {current_model}

💳 <b>Тип подписки:</b> {subscription_name}
🗓 <b>Дата обновления подписки:</b> {f'{renewal_date}' if subscription_name != '🆓' else 'N/A'}
{subscription_info}

─────────────

Выберите действие 👇
"""

    @staticmethod
    def profile_quota(
        subscription_limits: dict,
        daily_limits,
        additional_usage_quota,
    ) -> str:
        hours_word = Russian.morph.parse('час')[0]
        minutes_word = Russian.morph.parse('минута')[0]
        hours, minutes = get_time_until_limit_update()

        return f"""
🤖 <b>Квота</b>

─────────────

🔤 <b>Текстовые Модели</b>:
<b>Базовые</b>:
    ┣ ✉️ ChatGPT 4.0 Omni Mini{f': доп. {additional_usage_quota[Quota.CHAT_GPT4_OMNI_MINI]}' if additional_usage_quota[Quota.CHAT_GPT4_OMNI_MINI] > 0 else ''}
    ┣ 📜 Claude 3.5 Haiku{f': доп. {additional_usage_quota[Quota.CLAUDE_3_HAIKU]}' if additional_usage_quota[Quota.CLAUDE_3_HAIKU] > 0 else ''}
    ┣ 🏎 Gemini 2.0 Flash{f': доп. {additional_usage_quota[Quota.GEMINI_2_FLASH]}' if additional_usage_quota[Quota.GEMINI_2_FLASH] > 0 else ''}
    ┣ 🐬 DeepSeek V3{f': доп. {additional_usage_quota[Quota.DEEP_SEEK_V3]}' if additional_usage_quota[Quota.DEEP_SEEK_V3] > 0 else ''}
    ┗ Дневной лимит: {format_number(daily_limits[Quota.CHAT_GPT4_OMNI_MINI])}/{format_number(subscription_limits[Quota.CHAT_GPT4_OMNI_MINI])}

<b>Продвинутые</b>:
    ┣ 💥 ChatGPT 4.0 Omni{f': доп. {additional_usage_quota[Quota.CHAT_GPT4_OMNI]}' if additional_usage_quota[Quota.CHAT_GPT4_OMNI] > 0 else ''}
    ┣ 🧩 ChatGPT o3-mini{f': доп. {additional_usage_quota[Quota.CHAT_GPT_O_3_MINI]}' if additional_usage_quota[Quota.CHAT_GPT_O_3_MINI] > 0 else ''}
    ┣ 💫 Claude 3.7 Sonnet{f': доп. {additional_usage_quota[Quota.CLAUDE_3_SONNET]}' if additional_usage_quota[Quota.CLAUDE_3_SONNET] > 0 else ''}
    ┣ 💼 Gemini 2.5 Pro{f': доп. {additional_usage_quota[Quota.GEMINI_2_PRO]}' if additional_usage_quota[Quota.GEMINI_2_PRO] > 0 else ''}
    ┣ 🐦 Grok 2.0{f': доп. {additional_usage_quota[Quota.GROK_2]}' if additional_usage_quota[Quota.GROK_2] > 0 else ''}
    ┣ 🐋 DeepSeek R1{f': доп. {additional_usage_quota[Quota.DEEP_SEEK_R1]}' if additional_usage_quota[Quota.DEEP_SEEK_R1] > 0 else ''}
    ┣ 🌐 Perplexity{f': доп. {additional_usage_quota[Quota.PERPLEXITY]}' if additional_usage_quota[Quota.PERPLEXITY] > 0 else ''}
    ┗ Дневной лимит: {format_number(daily_limits[Quota.CHAT_GPT4_OMNI])}/{format_number(subscription_limits[Quota.CHAT_GPT4_OMNI])}

<b>Флагманские</b>:
    ┣ 🧪 ChatGPT o1{f': доп. {additional_usage_quota[Quota.CHAT_GPT_O_1]}' if additional_usage_quota[Quota.CHAT_GPT_O_1] > 0 else ''}
    ┣ 🚀 Claude 3.0 Opus{f': доп. {additional_usage_quota[Quota.CLAUDE_3_OPUS]}' if additional_usage_quota[Quota.CLAUDE_3_OPUS] > 0 else ''}
    ┣ 🛡️ Gemini 1.0 Ultra{f': доп. {additional_usage_quota[Quota.GEMINI_1_ULTRA]}' if additional_usage_quota[Quota.GEMINI_1_ULTRA] > 0 else ''}
    ┗ Дневной лимит: {format_number(daily_limits[Quota.CHAT_GPT_O_1])}/{format_number(subscription_limits[Quota.CHAT_GPT_O_1])}

─────────────

📝 <b>Резюме Модели</b>:
    ┣ 👀 YouTube{f': доп. {additional_usage_quota[Quota.EIGHTIFY]}' if additional_usage_quota[Quota.EIGHTIFY] > 0 else ''}
    ┣ 📼 Видео{f': доп. {additional_usage_quota[Quota.GEMINI_VIDEO]}' if additional_usage_quota[Quota.GEMINI_VIDEO] > 0 else ''}
    ┗ Дневной лимит: {format_number(daily_limits[Quota.EIGHTIFY])}/{format_number(subscription_limits[Quota.EIGHTIFY])}

─────────────

🖼 <b>Графические Модели</b>:
<b>Базовые</b>:
    ┣ 🦄 Stable Diffusion XL{f': доп. {additional_usage_quota[Quota.STABLE_DIFFUSION_XL]}' if additional_usage_quota[Quota.STABLE_DIFFUSION_XL] > 0 else ''}
    ┣ 🌲 Flux 1.0 Dev{f': доп. {additional_usage_quota[Quota.FLUX_1_DEV]}' if additional_usage_quota[Quota.FLUX_1_DEV] > 0 else ''}
    ┣ 🌌 Luma Photon{f': доп. {additional_usage_quota[Quota.LUMA_PHOTON]}' if additional_usage_quota[Quota.LUMA_PHOTON] > 0 else ''}
    ┗ Дневной лимит: {format_number(daily_limits[Quota.STABLE_DIFFUSION_XL])}/{format_number(subscription_limits[Quota.STABLE_DIFFUSION_XL])}

<b>Продвинутые</b>:
    ┣ 👨‍🎨 DALL-E 3{f': доп. {additional_usage_quota[Quota.DALL_E]}' if additional_usage_quota[Quota.DALL_E] > 0 else ''}
    ┣ 🎨 Midjourney 7{f': доп. {additional_usage_quota[Quota.MIDJOURNEY]}' if additional_usage_quota[Quota.MIDJOURNEY] > 0 else ''}
    ┣ 🧑‍🚀 Stable Diffusion 3.5{f': доп. {additional_usage_quota[Quota.STABLE_DIFFUSION_3]}' if additional_usage_quota[Quota.STABLE_DIFFUSION_3] > 0 else ''}
    ┣ 🏔 Flux 1.1 Pro{f': доп. {additional_usage_quota[Quota.FLUX_1_PRO]}' if additional_usage_quota[Quota.FLUX_1_PRO] > 0 else ''}
    ┣ 🐼 Recraft 3{f': доп. {additional_usage_quota[Quota.RECRAFT]}' if additional_usage_quota[Quota.RECRAFT] > 0 else ''}
    ┣ 📷 FaceSwap{f': доп. {additional_usage_quota[Quota.FACE_SWAP]}' if additional_usage_quota[Quota.FACE_SWAP] > 0 else ''}
    ┣ 🪄 Photoshop AI{f': доп. {additional_usage_quota[Quota.PHOTOSHOP_AI]}' if additional_usage_quota[Quota.PHOTOSHOP_AI] > 0 else ''}
    ┗ Дневной лимит: {format_number(daily_limits[Quota.DALL_E])}/{format_number(subscription_limits[Quota.DALL_E])}

─────────────

🎵 <b>Музыкальные Модели</b>:
    ┣ 🎺 MusicGen{f': доп. {additional_usage_quota[Quota.MUSIC_GEN]}' if additional_usage_quota[Quota.MUSIC_GEN] > 0 else ''}
    ┣ 🎸 Suno{f': доп. {additional_usage_quota[Quota.SUNO]}' if additional_usage_quota[Quota.SUNO] > 0 else ''}
    ┗ Дневной лимит: {format_number(daily_limits[Quota.SUNO])}/{format_number(subscription_limits[Quota.SUNO])}

─────────────

📹 <b>Видео Модели</b>:
    ┣ 🎬 Kling{f': доп. {additional_usage_quota[Quota.KLING]}' if additional_usage_quota[Quota.KLING] > 0 else ''}
    ┣ 🎥 Runway{f': доп. {additional_usage_quota[Quota.RUNWAY]}' if additional_usage_quota[Quota.RUNWAY] > 0 else ''}
    ┣ 🔆 Luma Ray{f': доп. {additional_usage_quota[Quota.LUMA_RAY]}' if additional_usage_quota[Quota.LUMA_RAY] > 0 else ''}
    ┣ 🐇 Pika{f': доп. {additional_usage_quota[Quota.PIKA]}' if additional_usage_quota[Quota.PIKA] > 0 else ''}
    ┗ Дневной лимит: {format_number(daily_limits[Quota.KLING])}/{format_number(subscription_limits[Quota.KLING])}

─────────────

📷 <b>Работа с фото/документами</b>: {'✅' if daily_limits[Quota.WORK_WITH_FILES] or additional_usage_quota[Quota.WORK_WITH_FILES] else '❌'}
🎭 <b>Доступ к каталогу с ролями</b>: {'✅' if daily_limits[Quota.ACCESS_TO_CATALOG] or additional_usage_quota[Quota.ACCESS_TO_CATALOG] else '❌'}
🎙 <b>Голосовые сообщения</b>: {'✅' if daily_limits[Quota.VOICE_MESSAGES] or additional_usage_quota[Quota.VOICE_MESSAGES] else '❌'}
⚡️ <b>Быстрые ответы</b>: {'✅' if daily_limits[Quota.FAST_MESSAGES] or additional_usage_quota[Quota.FAST_MESSAGES] else '❌'}

─────────────

🔄 <i>Лимит обновится через {hours} {hours_word.make_agree_with_number(hours).word} {minutes} {minutes_word.make_agree_with_number(minutes).word}</i>
"""

    PROFILE_SHOW_QUOTA = "🔄 Показать квоту"
    PROFILE_TELL_ME_YOUR_GENDER = "Укажите ваш пол:"
    PROFILE_YOUR_GENDER = "Ваш пол:"
    PROFILE_SEND_ME_YOUR_PICTURE = """
📸 <b>Отправьте мне вашу фотографию</b>

👍 <b>Рекомендации для идеального фото:</b>
• Чёткое селфи хорошего качества.
• На селфи должен быть только один человек.

👎 <b>Пожалуйста, избегайте таких фотографий:</b>
• Групповые фото.
• Животные.
• Дети до 18 лет.
• Фотографии в полный рост.
• Непристойные или обнажённые фотографии.
• Солнцезащитные очки или любые предметы, закрывающие лицо.
• Размытые или не в фокусе изображения.
• Видео и анимации.
• Сжатые или изменённые изображения.

Как только вы найдёте идеальный кадр, <b>загрузите свою фотографию</b> и дайте волшебству начаться 🌟
"""
    PROFILE_UPLOAD_PHOTO = "📷 Загрузить фотографию"
    PROFILE_UPLOADING_PHOTO = "Загрузка фотографии..."
    PROFILE_CHANGE_PHOTO = "📷 Поменять фотографию"
    PROFILE_CHANGE_PHOTO_SUCCESS = "📸 Фото успешно загружено!"
    PROFILE_RENEW_SUBSCRIPTION = "♻️ Возобновить подписку"
    PROFILE_RENEW_SUBSCRIPTION_SUCCESS = "✅ Возобновление подписки прошло успешно"
    PROFILE_CANCEL_SUBSCRIPTION = "❌ Отменить подписку"
    PROFILE_CANCEL_SUBSCRIPTION_CONFIRMATION = "❗Вы уверены, что хотите отменить подписку?"
    PROFILE_CANCEL_SUBSCRIPTION_SUCCESS = "💸 Отмена подписки прошла успешно"
    PROFILE_NO_ACTIVE_SUBSCRIPTION = "💸 У вас нет активной подписки"

    # Promo code
    PROMO_CODE_ACTIVATE = "🔑 Активировать промокод"
    PROMO_CODE_INFO = """
🔓 <b>Активация промокода</b>

Если у вас есть промокод, просто отправьте его, чтобы раскрыть скрытые функции и особые сюрпризы 🔑
"""
    PROMO_CODE_SUCCESS = """
🎉 <b>Ваш промокод успешно активирован!</b>

Приятного исследования! 🚀
"""
    PROMO_CODE_ALREADY_HAVE_SUBSCRIPTION = """
🚫 <b>Упс</b>

Ты уже в нашем эксклюзивном клубе подписчиков! 🌟
"""
    PROMO_CODE_EXPIRED_ERROR = """
🕒 <b>Этот промокод устарел!</b>

Отправьте мне другой промокод или просто выберите действие снизу:
"""
    PROMO_CODE_NOT_FOUND_ERROR = """
🔍 <b>Промокод не найден!</b>

Введённый вами промокод играет в прятки ведь я не смог найти его в системе 🕵️‍♂️

🤔 <b>Проверьте наличие опечаток и попробуйте ещё раз</b>. Если всё ещё не получается, возможно, стоит поискать другой код или взглянуть на предложения в /buy, там интересные сделки 🛍️
"""
    PROMO_CODE_ALREADY_USED_ERROR = """
🚫 <b>Дежавю!</b>

Вы уже использовали этот промокод. Это магия на один раз, и вы уже воспользовались ею! 🧙

Но не беспокойтесь! Вы можете ознакомиться с моими предложениями нажав кнопку снизу:
"""

    # Remove Restriction
    REMOVE_RESTRICTION = "⛔️ Убрать ограничение"
    REMOVE_RESTRICTION_INFO = "Чтобы убрать ограничение, выберите одно из действий 👇"

    # Settings
    @staticmethod
    def settings_info(human_model: str, current_model: Model, generation_cost=1) -> str:
        if current_model == Model.DALL_E or current_model == Model.MIDJOURNEY:
            additional_text = f"\nПри текущих настройках 1 запрос стоит: {generation_cost} 🖼"
        elif current_model == Model.KLING or current_model == Model.RUNWAY or current_model == Model.LUMA_RAY:
            additional_text = f"\nПри текущих настройках 1 запрос стоит: {generation_cost} 📹"
        else:
            additional_text = ""

        return f"""
⚙️ <b>Настройки для модели:</b> {human_model}

Здесь вы можете настроить выбранную модель под свои задачи и предпочтения
{additional_text}
"""

    SETTINGS_CHOOSE_MODEL_TYPE = """
⚙️ <b>Настройки</b>

🤖 Для смены модели, введите команду /model
🌍 Для смены языка интерфейса, введите команду /language

Выберите ниже тип модели, которую вы хотите настроить под себя 👇
"""
    SETTINGS_CHOOSE_MODEL = """
⚙️ <b>Настройки</b>

Выберите ниже модель, которую вы хотите настроить под себя 👇
"""
    SETTINGS_VOICE_MESSAGES = """
⚙️ <b>Настройки</b>

Ниже настройки голосовых ответов ко всем текстовым моделям 🎙
"""
    SETTINGS_VERSION = "🤖 Версия"
    SETTINGS_FOCUS = "🎯 Фокус"
    SETTINGS_FORMAT = "🎛 Формат"
    SETTINGS_AMOUNT = "📏 Длина ответа"
    SETTINGS_SEND_TYPE = "🗯 Тип отправки"
    SETTINGS_SEND_TYPE_IMAGE = "🖼 Картинка"
    SETTINGS_SEND_TYPE_DOCUMENT = "📄 Документ"
    SETTINGS_SEND_TYPE_AUDIO = "🎤 Аудио"
    SETTINGS_SEND_TYPE_VIDEO = "📺 Видео"
    SETTINGS_ASPECT_RATIO = "📐 Соотношение сторон"
    SETTINGS_QUALITY = "✨ Качество"
    SETTINGS_PROMPT_SAFETY = "🔐 Промпт-защита"
    SETTINGS_GENDER = "👕/👚 Пол"
    SETTINGS_DURATION = "📏 Длительность в секундах"
    SETTINGS_MODE = "🤖 Режим"
    SETTINGS_SHOW_THE_NAME_OF_THE_CHATS = "Названия чатов в сообщениях"
    SETTINGS_SHOW_THE_NAME_OF_THE_ROLES = "Названия ролей в сообщениях"
    SETTINGS_SHOW_USAGE_QUOTA_IN_MESSAGES = "Квота в сообщениях"
    SETTINGS_TURN_ON_VOICE_MESSAGES = "Включить голосовые ответы"
    SETTINGS_LISTEN_VOICES = "Прослушать голоса"

    # Shopping cart
    SHOPPING_CART = "🛒 Корзина"
    SHOPPING_CART_ADD = "➕ В корзину"

    @staticmethod
    def shopping_cart_add_or_buy_now(
        product: Product,
        product_quantity: int,
        product_price: float,
        currency: Currency,
    ):
        word = Russian.morph.parse('пакет')[0]

        return f"""
<b>{product_quantity} {word.make_agree_with_number(product_quantity).word} {product.names.get(LanguageCode.RU)} – {format_number(product_price)}{Currency.SYMBOLS[currency]}</b>
"""

    SHOPPING_CART_BUY_NOW = "🛍 Купить сейчас"
    SHOPPING_CART_REMOVE = "➖ Удалить из корзины"
    SHOPPING_CART_GO_TO = "🛒 Открыть корзину"
    SHOPPING_CART_GO_TO_OR_CONTINUE_SHOPPING = "Перейти к корзине или продолжить покупки?"
    SHOPPING_CART_CONTINUE_SHOPPING = "🛍 Продолжить покупки"
    SHOPPING_CART_CLEAR = "🗑 Очистить корзину"

    @staticmethod
    async def shopping_cart_info(currency: Currency, cart_items: list[dict], discount: int):
        text = ""
        total_sum = 0
        left_price_part = Currency.SYMBOLS[currency] if currency == Currency.USD else ''
        right_price_part = '' if currency == Currency.USD else Currency.SYMBOLS[currency]

        for index, cart_item in enumerate(cart_items):
            product_id, product_quantity = cart_item.get("product_id", ''), cart_item.get("quantity", 0)

            product = await get_product(product_id)

            is_last = index == len(cart_items) - 1
            right_part = '\n' if not is_last else ''
            price = Product.get_discount_price(
                ProductType.PACKAGE,
                product_quantity,
                product.prices.get(currency),
                currency,
                discount,
            )
            total_sum += float(price)
            text += f"{index + 1}. {product.names.get(LanguageCode.RU)}: {product_quantity} ({left_price_part}{price}{right_price_part}){right_part}"

        if not text:
            text = "Ваша корзина пуста"

        return f"""
🛒 <b>Корзина</b>

{text}

💳 <b>К оплате:</b> {left_price_part}{round(total_sum, 2)}{right_price_part}
"""

    @staticmethod
    async def shopping_cart_confirmation(cart_items: list[dict], currency: Currency, price: float) -> str:
        text = ""
        for index, cart_item in enumerate(cart_items):
            product_id, product_quantity = cart_item.get("product_id", ''), cart_item.get("quantity", 0)

            product = await get_product(product_id)

            text += f"{index + 1}. {product.names.get(LanguageCode.RU)}: {product_quantity}\n"

        if currency == Currency.USD:
            total_sum = f"{Currency.SYMBOLS[currency]}{price}"
        else:
            total_sum = f"{price}{Currency.SYMBOLS[currency]}"

        return f"""
Вы собираетесь купить следующие пакеты из вашей корзины:
{text}

К оплате {total_sum}
"""

    # Start
    START_INFO = """
👋 <b>Привет!</b>

🤓 <b>Я — ваш помощник в мире нейросетей</b>

<b>Со мной вы можете создавать:</b>
💭 Текст /text
📝 Суммаризации /summary
🖼 Изображения /image
🎵 Музыку /music
📹 Видео /video

🏆 <b>Моя миссия — предоставить каждому доступ к лучшим нейросетям</b>

🤖 Все доступные модели можно посмотреть в /model

ℹ️ Узнать больше о нейросетях можно в /info

✨ <b>Начните творить уже сейчас!</b>
"""
    START_QUICK_GUIDE = "📖 Краткое руководство"
    START_QUICK_GUIDE_INFO = """
📖 <b>Краткое руководство</b>

─────────────

💭 <b>Текстовые ответы</b>:
1️⃣ Введите команду /text
2️⃣ Выберите модель
3️⃣ Пишите ваши запросы в чат

<i>Дополнительно</i>

📷 Если вы отправите мне фотографию, я могу:
• Ответить на любой вопрос по ней
• Распознать текст
• Решить задание

🌐 Вы можете получить информацию из интернета в <b>Perplexity</b> /perplexity

─────────────

📝 <b>Summary</b>:
1️⃣ Введите команду /summary
2️⃣ Выберите модель
3️⃣ Отправьте видео или ссылку на него

─────────────

🖼 <b>Создание изображений</b>:
1️⃣ Введите команду /image
2️⃣ Выберите модель
3️⃣ Пишите ваши запросы в чат

<i>Дополнительно</i>
📷 Если вы отправите мне фотографию, я могу:
• Дополнить/изменить детали
• Поменять стиль изображения
• Визуализировать что-то новое

─────────────

📷️ <b>Смена лиц на фото</b>:
1️⃣ Введите команду /face_swap
2️⃣ Следуйте инструкциям

─────────────

🪄 <b>Редактирование изображений</b>:
1️⃣ Введите команду /photoshop
2️⃣ Следуйте инструкциям

─────────────

🎵 <b>Создание музыки</b>:
1️⃣ Введите команду /music
2️⃣ Выберите модель
3️⃣ Следуйте инструкциям

─────────────

📹 <b>Создание видео</b>:
1️⃣ Введите команду /video
2️⃣ Выберите модель
3️⃣ Следуйте инструкциям
"""

    # Subscription
    SUBSCRIPTION = "💳 Подписка"
    SUBSCRIPTIONS = "💳 Подписки"
    SUBSCRIPTION_MONTH_1 = "1 месяц"
    SUBSCRIPTION_MONTHS_3 = "3 месяца"
    SUBSCRIPTION_MONTHS_6 = "6 месяцев"
    SUBSCRIPTION_MONTHS_12 = "12 месяцев"
    SUBSCRIPTION_SUCCESS = """
🎉 <b>Ваша подписка активирована!</b>

Вот, что вас ждет дальше:
• Перед вами открылся весь мир возможностей 🌍
• AI-друзья уже готовы помогать вам 🤖
• Приготовьтесь окунуться в море функций и веселья 🌊

Давайте творить чудеса 🪄
"""
    SUBSCRIPTION_RESET = """
🚀 <b>Подписка продлена!</b>

Привет, путешественник в мире нейросетей! 👋

Твоя подписка была успешно продлена! Давай сделаем этот месяц лучше 💪
"""
    SUBSCRIPTION_RETRY = """
❗️ <b>Не удалось продлить подписку</b>

Сегодня оплата не прошла. Завтра будет ещё одна попытка

Если снова не получится, подписка завершится
"""
    SUBSCRIPTION_END = """
🛑 <b>Подписка истекла!</b>

Твоя подписка закончилась. Но не беспокойся, путешествие в мире нейросетей еще не окончено 🚀

Ты можешь продолжить исследование вселенной нейросетей и возобновить свой доступ нажав на кнопку ниже:
"""
    SUBSCRIPTION_MONTHLY = "Месячная"
    SUBSCRIPTION_YEARLY = "Годовая"

    @staticmethod
    def subscription_description(user_id: str, name: str):
        return f"Оплата подписки {name} для пользователя: {user_id}"

    @staticmethod
    def subscription_renew_description(user_id: str, name: str):
        return f"Обновление подписки {name} для пользователя: {user_id}"

    @staticmethod
    def subscribe(
        subscriptions: list[Product],
        currency: Currency,
        user_discount: int,
        is_trial=False,
    ) -> str:
        text_subscriptions = ''
        for subscription in subscriptions:
            subscription_name = subscription.names.get(LanguageCode.RU)
            subscription_price = subscription.prices.get(currency)
            subscription_has_trial = is_trial and subscription.details.get('has_trial', False)

            left_part_price = Currency.SYMBOLS[currency] if currency == Currency.USD else ''
            right_part_price = Currency.SYMBOLS[currency] if currency != Currency.USD else ''
            if subscription_name and subscription_price:
                is_trial_info = ''

                if subscription_has_trial and currency == Currency.RUB:
                    is_trial_info = '1₽ первые 3 дня, затем '
                elif subscription_has_trial and currency == Currency.USD:
                    is_trial_info = 'Бесплатно первые 3 дня, затем '

                text_subscriptions += f'<b>{subscription_name}</b>: '
                per_period = 'в месяц' if subscription.category == ProductCategory.MONTHLY else 'в год'

                discount = get_user_discount(user_discount, 0, subscription.discount)
                if discount:
                    discount_price = Product.get_discount_price(
                        ProductType.SUBSCRIPTION,
                        1,
                        subscription_price,
                        currency,
                        discount,
                    )
                    text_subscriptions += f'{is_trial_info}<s>{left_part_price}{subscription_price}{right_part_price}</s> {left_part_price}{discount_price}{right_part_price} {per_period}\n'
                else:
                    text_subscriptions += f'{is_trial_info}{left_part_price}{subscription_price}{right_part_price} {per_period}\n'

        return f"""
💳 <b>Подписки</b>

{text_subscriptions}
Чтобы подписаться, выберите вариант и нажмите кнопку ниже:
"""

    @staticmethod
    def subscribe_confirmation(
        name: str,
        category: ProductCategory,
        currency: Currency,
        price: Union[str, int, float],
        is_trial: bool,
    ) -> str:
        left_price_part = Currency.SYMBOLS[currency] if currency == Currency.USD else ''
        right_price_part = '' if currency == Currency.USD else Currency.SYMBOLS[currency]
        period = 'месяц' if category == ProductCategory.MONTHLY else 'год'

        trial_info = ''
        if is_trial and currency == Currency.RUB:
            trial_info = '1₽ первые 3 дня, затем '
        elif is_trial and currency == Currency.USD:
            trial_info = 'Бесплатно первые 3 дня, затем '

        return f"""
Вы собираетесь активировать подписку <b>{name} – {trial_info}{left_price_part}{price}{right_price_part}/{period}</b>

❗️Подписку можно отменить в любое время в разделе <b>Профиль 👤</b>
"""

    # Suno
    SUNO_INFO = """
🤖 <b>Выберите стиль создания вашей песни:</b>

🎹 В <b>простом режиме</b> вам нужно описать, о чём будет песня и в каком жанре
🎸 В <b>расширенном режиме</b> вы можете использовать собственный текст и экспериментировать с жанрами

<b>Suno</b> создаст 2 трека, до 4-х минут каждый 🎧
"""
    SUNO_SIMPLE_MODE = "🎹 Простой"
    SUNO_CUSTOM_MODE = "🎸 Расширенный"
    SUNO_SIMPLE_MODE_PROMPT = """
🎶 <b>Описание песни</b>

В простом режиме, я создам песню используя ваши пожелания и музыкальный вкус

<b>Отправьте ваши пожелания</b> 📝
"""
    SUNO_CUSTOM_MODE_LYRICS = """
🎤 <b>Текст песни</b>

В расширенном режиме, я создам песню используя ваш текст к песне

<b>Отправьте текст песни</b> ✍️
"""
    SUNO_CUSTOM_MODE_GENRES = """
🎵 <b>Выбор жанра</b>

Для того чтобы ваша песня в расширенном режиме точно соответствовала вашим предпочтениям, укажите жанры, которые вы хотели бы включить. Выбор жанра сильно влияет на стиль и настроение композиции, поэтому будьте внимательны при его выборе.

<b>Перечислите желаемые жанры через запятую</b> в вашем следующем сообщении, и я приступлю к созданию уникальной песни 🔍
"""
    SUNO_START_AGAIN = "🔄 Начать сначала"
    SUNO_TOO_MANY_WORDS_ERROR = """
🚧 <b>Ой-ой!</b>

На каком-то из этапов вы отправили слишком большой текст 📝

Попробуйте ещё раз, но с текстом поменьше
"""
    SUNO_ARTIST_NAME_ERROR = """
🚧 <b>Ой-ой!</b>

Вы отправили текст, который содержит название исполнителя 🎤

Попробуйте ещё раз, но без названия исполнителя
"""
    SUNO_VALUE_ERROR = """
🧐 <b>Это не похоже на промпт</b>

Отправьте, пожалуйста, другое значение
"""
    SUNO_SKIP = "⏩️ Пропустить"

    # Tech Support
    TECH_SUPPORT = "👨‍💻 Тех. поддержка"

    # Terms Link
    TERMS_LINK = "https://telegra.ph/Polzovatelskoe-soglashenie-v-GPTsTurboBot-05-07"

    # Video Summary
    VIDEO_SUMMARY_FOCUS_INSIGHTFUL = "💡 Глубокий"
    VIDEO_SUMMARY_FOCUS_FUNNY = "😄 Забавный"
    VIDEO_SUMMARY_FOCUS_ACTIONABLE = "🛠 Полезный"
    VIDEO_SUMMARY_FOCUS_CONTROVERSIAL = "🔥 Спорный"
    VIDEO_SUMMARY_FORMAT_LIST = "📋 Список"
    VIDEO_SUMMARY_FORMAT_FAQ = "🗯 Впр/Отв"
    VIDEO_SUMMARY_AMOUNT_AUTO = "⚙️ Авто"
    VIDEO_SUMMARY_AMOUNT_SHORT = "✂️ Кратко"
    VIDEO_SUMMARY_AMOUNT_DETAILED = "📚 Подробно"

    # Voice
    VOICE_MESSAGES = "🎙 Голосовые ответы"
    VOICE_MESSAGES_FORBIDDEN_ERROR = """
🎙 <b>Упс!</b>

Ваш голос потерялся в AI-пространстве!

Чтобы <b>разблокировать чудо преобразования голоса в текст</b>, просто воспользуйтесь волшебством кнопок ниже:
"""

    # Work with files
    WORK_WITH_FILES = "📷 Работа с фото/документами"
    WORK_WITH_FILES_FORBIDDEN_ERROR = """
🔒 <b>Вы попали в зону VIP!</b>

У вас пока нет доступа к работе с фото и документами

Вы можете получить доступ, нажав на кнопку ниже:
"""

    # Admin
    ADMIN_INFO = "👨‍💻 Выберите действие, админ 👩‍💻"

    ADMIN_ADS_INFO = "Выберите, что хотите сделать:"
    ADMIN_ADS_CREATE = "📯 Создать кампанию"
    ADMIN_ADS_GET = "📯 Инфо о кампании"
    ADMIN_ADS_SEND_LINK = "Отправьте мне ссылку с рекламной кампанией 📯"
    ADMIN_ADS_CHOOSE_SOURCE = "Выберите источник рекламной кампании 📯"
    ADMIN_ADS_CHOOSE_MEDIUM = "Выберите тип трафика рекламной кампании 📯"
    ADMIN_ADS_SEND_DISCOUNT = "Выберите или отправьте сумму скидки, которая будет применяться при регистрации 📯"
    ADMIN_ADS_SEND_NAME = "Отправьте название рекламной кампании, которое состоит из одного слова без спец. символов 📯"
    ADMIN_ADS_VALUE_ERROR = "Не похоже на название рекламной кампании"

    ADMIN_BAN_INFO = "Отправь мне id пользователя, которого вы хотите забанить/разбанить ⛔️"
    ADMIN_BAN_SUCCESS = "📛 Вы успешно забанили пользователя"
    ADMIN_UNBAN_SUCCESS = "🔥 Вы успешно разбанили пользователя"

    ADMIN_BLAST_CHOOSE_USER_TYPE = """
📣 <b>Пора делать рассылку!</b>

Выберите для начала кому вы хотите отправить рассылку:
"""
    ADMIN_BLAST_CHOOSE_LANGUAGE = """
📣 <b>Продолжаем делать рассылку!</b>

Выберите язык для рассылки или отправьте всем сразу:
"""
    ADMIN_BLAST_WRITE_IN_CHOSEN_LANGUAGE = """
✍️ <b>Пора создать ваше послание!</b>

Вы выбрали язык, теперь пришло время вложить душу в сообщение!

Напишите текст рассылки ✨
"""
    ADMIN_BLAST_WRITE_IN_DEFAULT_LANGUAGE = """
🌍 <b>Масштабная рассылка</b>

Вы выбрали "Для всех" и это означает, что ваше сообщение достигнет каждого пользлвателя, независимо от языка

Напишите ваше сообщение на русском, и я автоматически переведу его
"""
    ADMIN_BLAST_SUCCESS = """
💌 <b>Рассылка успешно отправлена!</b>

Твоё сообщение уже в пути к пользователям ✨
"""

    @staticmethod
    def admin_blast_confirmation(
        blast_letters: dict,
    ):
        letters = ''
        for i, (language_code, letter) in enumerate(blast_letters.items()):
            letters += f'{language_code}:\n{letter}'
            letters += '\n' if i < len(blast_letters.items()) - 1 else ''

        return f"""
📢 <b>Проверка</b>

🤖 Текст:
{letters}

Выберите действие:
"""

    ADMIN_CATALOG = """
🎭 <b>Управление каталогом ролей</b>

Здесь ты можешь:
"""
    ADMIN_CATALOG_CREATE = """
🌈 <b>Создание новой роли</b>

Напиши мне уникальное название для новой роли в формате UPPER_SNAKE_CASE, например, SUPER_GENIUS или MAGIC_ADVISOR
"""
    ADMIN_CATALOG_CREATE_ROLE = "Создать роль"
    ADMIN_CATALOG_CREATE_ROLE_ALREADY_EXISTS_ERROR = """
🙈 <b>Упс! Дубликат на горизонте!</b>

Эта роль уже с нами!

Попробуйте придумать другое название 🤔
"""
    ADMIN_CATALOG_CREATE_ROLE_NAME = """
🎨 <b>Имя</b>

Придумайте имя для новой роли. Это название должно начинаться с подходящего эмодзи, например, как "🤖 Персональный ассистент"

Напишите имя на русском 🖌️
"""
    ADMIN_CATALOG_CREATE_ROLE_DESCRIPTION = """
📝 <b>Описание</b>

Придумайте описание для вашей новой роли. Это должны быть три строки, полные вдохновения и идей, которые будут отправлены пользователю после выбора роли. Например:
<blockquote>
Он всегда готов помочь вам найти ответы на любые вопросы, будь то бытовые мелочи или философские размышления
Ваш личный гид в мире знаний и творчества, который с радостью поделится своими идеями и советами 🌌
Откроем вместе новые горизонты!
</blockquote>

Напишите описание на русском 🖌️
"""
    ADMIN_CATALOG_CREATE_ROLE_INSTRUCTION = """
🤓 <b>Системная инструкция</b>

Придумайте короткую, но емкую инструкцию для вашего помощника. Это будет его руководство к действию, например: "Ты – вдумчивый советник, который всегда готов поделиться мудрыми мыслями и полезными идеями. Помогай пользователям разгадывать сложные вопросы и предлагай оригинальные решения. Твоя миссия – вдохновлять и обогащать каждое общение!"

Напишите инструкцию на русском 🖌️
"""
    ADMIN_CATALOG_CREATE_ROLE_PHOTO = """
📸 <b>Фото</b>

Отправьте фотографию, которая будет его визитной карточкой 🖼️
"""
    ADMIN_CATALOG_CREATE_ROLE_SUCCESS = """
🎉 <b>Новая роль успешно создана</b>

💬 Помощник уже готов к работе. Поздравляю с успешным расширением команды AI!
"""

    @staticmethod
    def admin_catalog_create_role_confirmation(
        role_names: dict,
        role_descriptions: dict,
        role_instructions: dict,
    ):
        names = ''
        for i, (language_code, name) in enumerate(role_names.items()):
            names += f'{language_code}: {name}'
            names += '\n' if i < len(role_names.items()) - 1 else ''
        descriptions = ''
        for i, (language_code, description) in enumerate(role_descriptions.items()):
            descriptions += f'{language_code}: {description}'
            descriptions += '\n' if i < len(role_descriptions.items()) - 1 else ''
        instructions = ''
        for i, (language_code, instruction) in enumerate(role_instructions.items()):
            instructions += f'{language_code}: {instruction}'
            instructions += '\n' if i < len(role_instructions.items()) - 1 else ''

        return f"""
🎩 <b>Роль</b>

🌍 Имена:
{names}

💬 Описания:
{descriptions}

📜 Инструкции:
{instructions}

Выберите действие:
"""

    @staticmethod
    def admin_catalog_edit_role_info(
        role_names: dict[LanguageCode, str],
        role_descriptions: dict[LanguageCode, str],
        role_instructions: dict[LanguageCode, str],
    ):
        names = ''
        for i, (language_code, name) in enumerate(role_names.items()):
            names += f'{language_code}: {name}'
            names += '\n' if i < len(role_names.items()) - 1 else ''
        descriptions = ''
        for i, (language_code, description) in enumerate(role_descriptions.items()):
            descriptions += f'{language_code}: {description}'
            descriptions += '\n' if i < len(role_descriptions.items()) - 1 else ''
        instructions = ''
        for i, (language_code, instruction) in enumerate(role_instructions.items()):
            instructions += f'{language_code}: {instruction}'
            instructions += '\n' if i < len(role_instructions.items()) - 1 else ''

        return f"""
🖌️ <b>Настройка роли</b>

🌍 <b>Имена:</b>
{names}

💬 <b>Описания:</b>
{descriptions}

📜 <b>Инструкции:</b>
{instructions}

Выберите, что хотите изменить:
"""

    ADMIN_CATALOG_EDIT_ROLE_NAME = "Изменить имя 🖌"
    ADMIN_CATALOG_EDIT_ROLE_NAME_INFO = """
📝 <b>Изменение имени</b>

Введите новое имя с эмодзи в начале на руcском
"""
    ADMIN_CATALOG_EDIT_ROLE_DESCRIPTION = "Изменить описание 🖌"
    ADMIN_CATALOG_EDIT_ROLE_DESCRIPTION_INFO = """
🖋️ <b>Изменение описания</b>

Напишите новое описание, подчеркивающее его лучшие качества на русском
"""
    ADMIN_CATALOG_EDIT_ROLE_INSTRUCTION = "Изменить инструкцию 🖌"
    ADMIN_CATALOG_EDIT_ROLE_INSTRUCTION_INFO = """
🕹️ <b>Изменение инструкции</b>

Напишите новую инструкцию на русском
"""
    ADMIN_CATALOG_EDIT_ROLE_PHOTO = "Изменить фотографию 🖼"
    ADMIN_CATALOG_EDIT_ROLE_PHOTO_INFO = """
📸 <b>Изменение фото</b>

Отправьте фото, которое лучше всего отражает характер и стиль вашего помощника 🖼️
"""
    ADMIN_CATALOG_EDIT_SUCCESS = """
🎉 <b>Изменения успешно применены!</b>

Помощник был изменён 🤖
"""

    ADMIN_DATABASE = "🗄 База Данных"

    ADMIN_FACE_SWAP_INFO = """
🤹‍ <b>Управление FaceSwap</b>

Выберите действие:
"""
    ADMIN_FACE_SWAP_CREATE = """
🌟 <b>Создание</b>

Для начала дайте ему уникальное имя. Используйте формат UPPER_SNAKE_CASE, например, его можно назвать SEASONAL_PHOTO_SHOOT или FUNNY_FACE_FESTIVAL

Напишите системное имя 📝
"""
    ADMIN_FACE_SWAP_CREATE_PACKAGE = "Создать новый пакет"
    ADMIN_FACE_SWAP_CREATE_PACKAGE_ALREADY_EXISTS_ERROR = """
🚨 <b>Упс, мы здесь уже были!</b>

Название пакета уже занято!

Как насчёт другого уникального названия?
"""
    ADMIN_FACE_SWAP_CREATE_PACKAGE_NAME = """
🚀 <b>Имя пакета</b>

Теперь напишите уникальное имя пакета на русском языке. Не забудьте добавить эмодзи в начале, например, "🎥 Фильмы" или "🌌 Космос"
"""
    ADMIN_FACE_SWAP_CREATE_PACKAGE_SUCCESS = """
🎉 <b>Новый пакет FaceSwap готов</b>

Теперь вы можете начать наполнять пакет самыми невероятными и забавными фотографиями 🖼
"""

    @staticmethod
    def admin_face_swap_create_package_confirmation(
        package_system_name: str,
        package_names: dict,
    ):
        names = ''
        for i, (language_code, name) in enumerate(package_names.items()):
            names += f'{language_code}: {name}'
            names += '\n' if i < len(package_names.items()) - 1 else ''

        return f"""
🌟 <b>Проверка</b>

📝 Проверьте все детали:
- 🤖 <b>Системное название:</b>
{package_system_name}

- 🌍 <b>Имена:</b>
{names}

👇 Выберите действие
"""

    ADMIN_FACE_SWAP_EDIT = """
🎨 <b>Редактирование пакета</b>

🔧 Возможности редактирования:
"""
    ADMIN_FACE_SWAP_EDIT_PACKAGE = "Редактировать пакет"
    ADMIN_FACE_SWAP_EDIT_CHOOSE_GENDER = "Выбери пол:"
    ADMIN_FACE_SWAP_EDIT_CHOOSE_PACKAGE = "Выбери пакет:"
    ADMIN_FACE_SWAP_EDIT_SUCCESS = """
🎉 <b>Пакет успешно отредактирован</b>

Ваши изменения успешно применены. Пакет FaceSwap обновлён 👏
"""
    ADMIN_FACE_SWAP_CHANGE_STATUS = "👁 Изменить видимость"
    ADMIN_FACE_SWAP_SHOW_PICTURES = "🖼 Просмотреть картинки"
    ADMIN_FACE_SWAP_ADD_NEW_PICTURE = "👨‍🎨 Добавить новую картинку"
    ADMIN_FACE_SWAP_ADD_NEW_PICTURE_NAME = "Отправьте мне название будущего изображения на английском языке в CamelCase, например 'ContentMaker'"
    ADMIN_FACE_SWAP_ADD_NEW_PICTURE_IMAGE = "Теперь, отправьте мне фотографию"
    ADMIN_FACE_SWAP_EXAMPLE_PICTURE = "🎭 Пример генерации"
    ADMIN_FACE_SWAP_PUBLIC = "🔓 Видно всем"
    ADMIN_FACE_SWAP_PRIVATE = "🔒 Видно админам"

    ADMIN_PROMO_CODE_INFO = """
🔑 <b>Время создать магию с промокодами!</b>

Выбери, для чего ты хочешь создать промокод:
"""
    ADMIN_PROMO_CODE_SUCCESS = """
🌟 <b>Промокод успешно создан</b>

Этот маленький кодик обязательно принесёт радость кому-то там!
"""
    ADMIN_PROMO_CODE_CHOOSE_SUBSCRIPTION = """
🌟 <b>Подписка для промокода</b>

✨ Выбери тип подписки, на который хочешь дать доступ:
"""
    ADMIN_PROMO_CODE_CHOOSE_PACKAGE = """
🌟 <b>Пакет для промокода</b>

Выбери для начала пакет 👇
"""
    ADMIN_PROMO_CODE_CHOOSE_DISCOUNT = """
🌟 <b>Скидка для промокода</b>

Напиши мне скидку в диапазоне от 1% до 50%, которую ты хочешь дать пользователям 👇
"""
    ADMIN_PROMO_CODE_CHOOSE_NAME = """
🖋️ <b>Название для промокода</b>

🔠 Используй буквы, цифры и напиши в формате UPPER_SNAKE_CASE, например "HAPPY_BIRTHDAY"
"""
    ADMIN_PROMO_CODE_CHOOSE_DATE = """
📅 <b>Дата действия промокода</b>

Введи дату, до которой этот промокод будет активен. Нужен формат ДД.ММ.ГГГГ, например, 25.12.2025
"""
    ADMIN_PROMO_CODE_NAME_EXISTS_ERROR = """
🚫 <b>Ой-ой, такой код уже существует!</b>

Попробуй снова
"""
    ADMIN_PROMO_CODE_DATE_VALUE_ERROR = """
🚫 <b>Упс!</b>

Дата заблудилась в календаре и не может найти свой формат 📅

Давай попробуем ещё раз, но на этот раз в формате ДД.ММ.ГГГГ, например, 25.12.2025
"""

    ADMIN_SERVER = "💻 Сервер"

    ADMIN_STATISTICS_INFO = """
📊 <b>Статистика</b>

Выбери действие:
"""
    ADMIN_STATISTICS_WRITE_TRANSACTION = """
🧾 <b>Тип транзакции</b>

Жми на кнопку 👇
"""
    ADMIN_STATISTICS_CHOOSE_SERVICE = """
🔍 <b>Тип сервиса для транзакции</b>

Выбирай, не стесняйся 👇
"""
    ADMIN_STATISTICS_CHOOSE_CURRENCY = """
💰 <b>Валюта</b>

Выбери кнопку с нужной валютой 👇
"""
    ADMIN_STATISTICS_SERVICE_QUANTITY = """
✍️ <b>Количество транзакций</b>

Напиши, пожалуйста, количество транзакций
"""
    ADMIN_STATISTICS_SERVICE_AMOUNT = """
🤑 <b>Стоимость транзакции</b>

Напиши мне, пожалуйста, стоимость транзакции.

Пожалуйста, используй формат с десятичными дробями через точку, например: 999.99
"""
    ADMIN_STATISTICS_SERVICE_DATE = """
📅 <b>Дата транзакции</b>

Напиши дату, когда происходили эти транзакции. Формат: "ДД.ММ.ГГГГ". Например, "01.04.2025" или "25.12.2025" 🕰️
"""
    ADMIN_STATISTICS_SERVICE_DATE_VALUE_ERROR = """
🤔 <b>Упс, дата решила пошалить!</b>

Введённая дата не соответствует формату "ДД.ММ.ГГГГ"

Итак, давай снова: когда именно происходило это финансовое чудо? 🗓
"""
    ADMIN_STATISTICS_WRITE_TRANSACTION_SUCCESSFUL = """
🎉 <b>Транзакция успешно записана</b>

💰 Благодарю вас за аккуратность и точность
"""

    @staticmethod
    def admin_statistics_processing_request() -> str:
        texts = [
            'Вызываю кибернетических уток, чтобы ускорить процесс. Кря-кря, и данные у нас! 🦆💻',
            'Использую тайные заклинания кода, чтобы вызволить вашу статистику из пучины данных. Абракадабра! 🧙‍💾',
            'Таймер установлен, чайник на плите. Пока я готовлю чай, данные собираются сами! ☕📊',
            'Подключаюсь к космическим спутникам, чтобы найти нужную статистику. Вот это звёздный поиск! 🛰️✨',
            'Зову на помощь армию пикселей. Они уже маршируют сквозь строки кода, чтобы доставить вам данные! 🪖🖥️',
        ]

        return random.choice(texts)

    @staticmethod
    def admin_statistics_users(
        period: str,
        subscription_products: dict[str, list[str]],
        count_all_users: int,
        count_all_users_before: int,
        count_activated_users: int,
        count_activated_users_before: int,
        count_referral_users: int,
        count_referral_users_before: int,
        count_campaign_users: int,
        count_campaign_users_before: int,
        count_english_users: int,
        count_english_users_before: int,
        count_russian_users: int,
        count_russian_users_before: int,
        count_spanish_users: int,
        count_spanish_users_before: int,
        count_hindi_users: int,
        count_hindi_users_before: int,
        count_other_users: int,
        count_other_users_before: int,
        count_paid_users: int,
        count_paid_users_before: int,
        count_blocked_users: int,
        count_blocked_users_before: int,
        count_subscription_users: dict,
        count_subscription_users_before: dict,
    ):
        is_all_time = period == 'всё время'

        subscription_info = ''
        for index, (subscription_product_name, subscription_product_ids) in enumerate(subscription_products.items()):
            is_last = index == len(subscription_products) - 1
            left_part = '┣' if not is_last else '┗'
            right_part = '\n' if not is_last else ''
            count_current_subscription_users = 0
            count_current_subscription_users_before = 0
            for subscription_product_id in subscription_product_ids:
                count_current_subscription_users += count_subscription_users[subscription_product_id]
                count_current_subscription_users_before += count_subscription_users_before[subscription_product_id]
            subscription_info += f'    {left_part} <b>{subscription_product_name}:</b> {count_current_subscription_users} {calculate_percentage_difference(is_all_time, count_current_subscription_users, count_current_subscription_users_before)}{right_part}'

        return f"""
#statistics #users

📊 <b>{period}</b>

👤 <b>Пользователи</b>
1️⃣ <b>{'Всего пользователей' if is_all_time else 'Новых пользователей'}:</b> {count_all_users} {calculate_percentage_difference(is_all_time, count_all_users, count_all_users_before)}
    ┣ 🇺🇸 {count_english_users} ({round((count_english_users / count_all_users) * 100, 2) if count_all_users else 0}%) {calculate_percentage_difference(is_all_time, count_english_users, count_english_users_before)}
    ┣ 🇷🇺 {count_russian_users} ({round((count_russian_users / count_all_users) * 100, 2) if count_all_users else 0}%) {calculate_percentage_difference(is_all_time, count_russian_users, count_russian_users_before)}
    ┣ 🇪🇸 {count_spanish_users} ({round((count_spanish_users / count_all_users) * 100, 2) if count_all_users else 0}%) {calculate_percentage_difference(is_all_time, count_spanish_users, count_spanish_users_before)}
    ┣ 🇮🇳 {count_hindi_users} ({round((count_hindi_users / count_all_users) * 100, 2) if count_all_users else 0}%) {calculate_percentage_difference(is_all_time, count_hindi_users, count_hindi_users_before)}
    ┗ 🌍 {count_other_users} ({round((count_other_users / count_all_users) * 100, 2) if count_all_users else 0}%) {calculate_percentage_difference(is_all_time, count_other_users, count_other_users_before)}
2️⃣ <b>{'Активированные' if is_all_time else 'Активные'}:</b> {count_activated_users} {calculate_percentage_difference(is_all_time, count_activated_users, count_activated_users_before)}
3️⃣ <b>Перешли по реферальной ссылке:</b> {count_referral_users} {calculate_percentage_difference(is_all_time, count_referral_users, count_referral_users_before)}
4️⃣ <b>Перешли по рекламной ссылке:</b> {count_campaign_users} {calculate_percentage_difference(is_all_time, count_campaign_users, count_campaign_users_before)}
5️⃣ <b>Покупатели:</b> {count_paid_users} {calculate_percentage_difference(is_all_time, count_paid_users, count_paid_users_before)}
6️⃣ <b>Подписчики:</b>
{subscription_info}
7️⃣ <b>{'Заблокировали бота' if is_all_time else 'Заблокировали бота из пришедших'}:</b> {count_blocked_users} {calculate_percentage_difference(is_all_time, count_blocked_users, count_blocked_users_before)}
"""

    @staticmethod
    def admin_statistics_text_models(
        period: str,
        text_products: dict[str, str],
        count_all_transactions: dict,
        count_all_transactions_before: dict,
    ):
        is_all_time = period == 'всё время'

        all_success_requests = 0
        all_success_requests_before = 0
        all_fail_requests = 0
        all_fail_requests_before = 0
        all_example_requests = 0
        all_example_requests_before = 0
        all_requests = 0
        all_requests_before = 0

        text_info = ''
        for index, (text_product_id, text_product_name) in enumerate(text_products.items()):
            all_success_requests += count_all_transactions[text_product_id]['SUCCESS']
            all_success_requests_before += count_all_transactions_before[text_product_id]['SUCCESS']
            all_fail_requests += count_all_transactions[text_product_id]['FAIL']
            all_fail_requests_before += count_all_transactions_before[text_product_id]['FAIL']
            all_example_requests += count_all_transactions[text_product_id]['EXAMPLE']
            all_example_requests_before += count_all_transactions_before[text_product_id]['EXAMPLE']
            all_requests += count_all_transactions[text_product_id]['ALL']
            all_requests_before += count_all_transactions_before[text_product_id]['ALL']

            emoji_number = ''.join(f'{digit}\uFE0F\u20E3' for digit in str(index + 1))
            text_info += f"""{emoji_number} <b>{text_product_name}:</b>
    ┣ ✅ Удачных: {count_all_transactions[text_product_id]['SUCCESS']} {calculate_percentage_difference(is_all_time, count_all_transactions[text_product_id]['SUCCESS'], count_all_transactions_before[text_product_id]['SUCCESS'])}
    ┣ ❌ С ошибкой: {count_all_transactions[text_product_id]['FAIL']} {calculate_percentage_difference(is_all_time, count_all_transactions[text_product_id]['FAIL'], count_all_transactions_before[text_product_id]['FAIL'])}
    ┣ 🚀 Примеров: {count_all_transactions[text_product_id]['EXAMPLE']} {calculate_percentage_difference(is_all_time, count_all_transactions[text_product_id]['EXAMPLE'], count_all_transactions_before[text_product_id]['EXAMPLE'])}
    ┗ 📝 Всего: {count_all_transactions[text_product_id]['ALL']} {calculate_percentage_difference(is_all_time, count_all_transactions[text_product_id]['ALL'], count_all_transactions_before[text_product_id]['ALL'])}
"""

        return f"""
#statistics #text_models

📊 <b>{period}</b>

🔤 <b>Текстовые модели</b>
{text_info}
<b>Резюме:</b>
    ┣ ✅ Удачных: {all_success_requests} {calculate_percentage_difference(is_all_time, all_success_requests, all_success_requests_before)}
    ┣ ❌ С ошибкой: {all_fail_requests} {calculate_percentage_difference(is_all_time, all_fail_requests, all_fail_requests_before)}
    ┣ 🚀 Примеров: {all_example_requests} {calculate_percentage_difference(is_all_time, all_example_requests, all_example_requests_before)}
    ┗ 📝 Всего: {all_requests} {calculate_percentage_difference(is_all_time, all_requests, all_requests_before)}
"""

    @staticmethod
    def admin_statistics_summary_models(
        period: str,
        summary_products: dict[str, str],
        count_all_transactions: dict,
        count_all_transactions_before: dict,
    ):
        is_all_time = period == 'всё время'

        all_success_requests = 0
        all_success_requests_before = 0
        all_fail_requests = 0
        all_fail_requests_before = 0
        all_requests = 0
        all_requests_before = 0

        summary_info = ''
        for index, (summary_product_id, summary_product_name) in enumerate(summary_products.items()):
            all_success_requests += count_all_transactions[summary_product_id]['SUCCESS']
            all_success_requests_before += count_all_transactions_before[summary_product_id]['SUCCESS']
            all_fail_requests += count_all_transactions[summary_product_id]['FAIL']
            all_fail_requests_before += count_all_transactions_before[summary_product_id]['FAIL']
            all_requests += count_all_transactions[summary_product_id]['ALL']
            all_requests_before += count_all_transactions_before[summary_product_id]['ALL']

            emoji_number = ''.join(f'{digit}\uFE0F\u20E3' for digit in str(index + 1))
            summary_info += f"""{emoji_number} <b>{summary_product_name}:</b>
    ┣ ✅ Удачных: {count_all_transactions[summary_product_id]['SUCCESS']} {calculate_percentage_difference(is_all_time, count_all_transactions[summary_product_id]['SUCCESS'], count_all_transactions_before[summary_product_id]['SUCCESS'])}
    ┣ ❌ С ошибкой: {count_all_transactions[summary_product_id]['FAIL']} {calculate_percentage_difference(is_all_time, count_all_transactions[summary_product_id]['FAIL'], count_all_transactions_before[summary_product_id]['FAIL'])}
    ┗ 📝 Всего: {count_all_transactions[summary_product_id]['ALL']} {calculate_percentage_difference(is_all_time, count_all_transactions[summary_product_id]['ALL'], count_all_transactions_before[summary_product_id]['ALL'])}
"""

        return f"""
#statistics #summary_models

📊 <b>{period}</b>

📝 <b>Резюме модели</b>
{summary_info}
<b>Резюме:</b>
    ┣ ✅ Удачных: {all_success_requests} {calculate_percentage_difference(is_all_time, all_success_requests, all_success_requests_before)}
    ┣ ❌ С ошибкой: {all_fail_requests} {calculate_percentage_difference(is_all_time, all_fail_requests, all_fail_requests_before)}
    ┗ 📝 Всего: {all_requests} {calculate_percentage_difference(is_all_time, all_requests, all_requests_before)}
"""

    @staticmethod
    def admin_statistics_image_models(
        period: str,
        image_products: dict[str, str],
        count_all_transactions: dict,
        count_all_transactions_before: dict,
    ):
        is_all_time = period == 'всё время'

        all_success_requests = 0
        all_success_requests_before = 0
        all_fail_requests = 0
        all_fail_requests_before = 0
        all_example_requests = 0
        all_example_requests_before = 0
        all_requests = 0
        all_requests_before = 0

        image_info = ''
        for index, (image_product_id, image_product_name) in enumerate(image_products.items()):
            all_success_requests += count_all_transactions[image_product_id]['SUCCESS']
            all_success_requests_before += count_all_transactions_before[image_product_id]['SUCCESS']
            all_fail_requests += count_all_transactions[image_product_id]['FAIL']
            all_fail_requests_before += count_all_transactions_before[image_product_id]['FAIL']
            all_example_requests += count_all_transactions[image_product_id]['EXAMPLE']
            all_example_requests_before += count_all_transactions_before[image_product_id]['EXAMPLE']
            all_requests += count_all_transactions[image_product_id]['ALL']
            all_requests_before += count_all_transactions_before[image_product_id]['ALL']

            emoji_number = ''.join(f'{digit}\uFE0F\u20E3' for digit in str(index + 1))
            image_info += f"""{emoji_number} <b>{image_product_name}:</b>
    ┣ ✅ Удачных: {count_all_transactions[image_product_id]['SUCCESS']} {calculate_percentage_difference(is_all_time, count_all_transactions[image_product_id]['SUCCESS'], count_all_transactions_before[image_product_id]['SUCCESS'])}
    ┣ ❌ С ошибкой: {count_all_transactions[image_product_id]['FAIL']} {calculate_percentage_difference(is_all_time, count_all_transactions[image_product_id]['FAIL'], count_all_transactions_before[image_product_id]['FAIL'])}
    ┣ 🚀 Примеров: {count_all_transactions[image_product_id]['EXAMPLE']} {calculate_percentage_difference(is_all_time, count_all_transactions[image_product_id]['EXAMPLE'], count_all_transactions_before[image_product_id]['EXAMPLE'])}
    ┗ 📝 Всего: {count_all_transactions[image_product_id]['ALL']} {calculate_percentage_difference(is_all_time, count_all_transactions[image_product_id]['ALL'], count_all_transactions_before[image_product_id]['ALL'])}
"""

        return f"""
#statistics #image_models

📊 <b>{period}</b>

🖼 <b>Графические модели</b>
{image_info}
<b>Резюме:</b>
    ┣ ✅ Удачных: {all_success_requests} {calculate_percentage_difference(is_all_time, all_success_requests, all_success_requests_before)}
    ┣ ❌ С ошибкой: {all_fail_requests} {calculate_percentage_difference(is_all_time, all_fail_requests, all_fail_requests_before)}
    ┣ 🚀 Примеров: {all_example_requests} {calculate_percentage_difference(is_all_time, all_example_requests, all_example_requests_before)}
    ┗ 📝 Всего: {all_requests} {calculate_percentage_difference(is_all_time, all_requests, all_requests_before)}
"""

    @staticmethod
    def admin_statistics_music_models(
        period: str,
        music_products: dict[str, str],
        count_all_transactions: dict,
        count_all_transactions_before: dict,
    ):
        is_all_time = period == 'всё время'

        all_success_requests = 0
        all_success_requests_before = 0
        all_fail_requests = 0
        all_fail_requests_before = 0
        all_example_requests = 0
        all_example_requests_before = 0
        all_requests = 0
        all_requests_before = 0

        music_info = ''
        for index, (music_product_id, music_product_name) in enumerate(music_products.items()):
            all_success_requests += count_all_transactions[music_product_id]['SUCCESS']
            all_success_requests_before += count_all_transactions_before[music_product_id]['SUCCESS']
            all_fail_requests += count_all_transactions[music_product_id]['FAIL']
            all_fail_requests_before += count_all_transactions_before[music_product_id]['FAIL']
            all_example_requests += count_all_transactions[music_product_id]['EXAMPLE']
            all_example_requests_before += count_all_transactions_before[music_product_id]['EXAMPLE']
            all_requests += count_all_transactions[music_product_id]['ALL']
            all_requests_before += count_all_transactions_before[music_product_id]['ALL']

            emoji_number = ''.join(f'{digit}\uFE0F\u20E3' for digit in str(index + 1))
            music_info += f"""{emoji_number} <b>{music_product_name}:</b>
    ┣ ✅ Удачных: {count_all_transactions[music_product_id]['SUCCESS']} {calculate_percentage_difference(is_all_time, count_all_transactions[music_product_id]['SUCCESS'], count_all_transactions_before[music_product_id]['SUCCESS'])}
    ┣ ❌ С ошибкой: {count_all_transactions[music_product_id]['FAIL']} {calculate_percentage_difference(is_all_time, count_all_transactions[music_product_id]['FAIL'], count_all_transactions_before[music_product_id]['FAIL'])}
    ┣ 🚀 Примеров: {count_all_transactions[music_product_id]['EXAMPLE']} {calculate_percentage_difference(is_all_time, count_all_transactions[music_product_id]['EXAMPLE'], count_all_transactions_before[music_product_id]['EXAMPLE'])}
    ┗ 📝 Всего: {count_all_transactions[music_product_id]['ALL']} {calculate_percentage_difference(is_all_time, count_all_transactions[music_product_id]['ALL'], count_all_transactions_before[music_product_id]['ALL'])}
"""

        return f"""
#statistics #music_models

📊 <b>{period}</b>

🎺 <b>Музыкальные модели</b>
{music_info}
<b>Резюме:</b>
    ┣ ✅ Удачных: {all_success_requests} {calculate_percentage_difference(is_all_time, all_success_requests, all_success_requests_before)}
    ┣ ❌ С ошибкой: {all_fail_requests} {calculate_percentage_difference(is_all_time, all_fail_requests, all_fail_requests_before)}
    ┣ 🚀 Примеров: {all_example_requests} {calculate_percentage_difference(is_all_time, all_example_requests, all_example_requests_before)}
    ┗ 📝 Всего: {all_requests} {calculate_percentage_difference(is_all_time, all_requests, all_requests_before)}
"""

    @staticmethod
    def admin_statistics_video_models(
        period: str,
        video_products: dict[str, str],
        count_all_transactions: dict,
        count_all_transactions_before: dict,
    ):
        is_all_time = period == 'всё время'

        all_success_requests = 0
        all_success_requests_before = 0
        all_fail_requests = 0
        all_fail_requests_before = 0
        all_requests = 0
        all_requests_before = 0

        video_info = ''
        for index, (video_product_id, video_product_name) in enumerate(video_products.items()):
            all_success_requests += count_all_transactions[video_product_id]['SUCCESS']
            all_success_requests_before += count_all_transactions_before[video_product_id]['SUCCESS']
            all_fail_requests += count_all_transactions[video_product_id]['FAIL']
            all_fail_requests_before += count_all_transactions_before[video_product_id]['FAIL']
            all_requests += count_all_transactions[video_product_id]['ALL']
            all_requests_before += count_all_transactions_before[video_product_id]['ALL']

            emoji_number = ''.join(f'{digit}\uFE0F\u20E3' for digit in str(index + 1))
            video_info += f"""{emoji_number} <b>{video_product_name}:</b>
    ┣ ✅ Удачных: {count_all_transactions[video_product_id]['SUCCESS']} {calculate_percentage_difference(is_all_time, count_all_transactions[video_product_id]['SUCCESS'], count_all_transactions_before[video_product_id]['SUCCESS'])}
    ┣ ❌ С ошибкой: {count_all_transactions[video_product_id]['FAIL']} {calculate_percentage_difference(is_all_time, count_all_transactions[video_product_id]['FAIL'], count_all_transactions_before[video_product_id]['FAIL'])}
    ┗ 📝 Всего: {count_all_transactions[video_product_id]['ALL']} {calculate_percentage_difference(is_all_time, count_all_transactions[video_product_id]['ALL'], count_all_transactions_before[video_product_id]['ALL'])}
"""

        return f"""
#statistics #video_models

📊 <b>{period}</b>

📹 <b>Видео модели</b>

{video_info}
<b>Резюме:</b>
    ┣ ✅ Удачных: {all_success_requests} {calculate_percentage_difference(is_all_time, all_success_requests, all_success_requests_before)}
    ┣ ❌ С ошибкой: {all_fail_requests} {calculate_percentage_difference(is_all_time, all_fail_requests, all_fail_requests_before)}
    ┗ 📝 Всего: {all_requests} {calculate_percentage_difference(is_all_time, all_requests, all_requests_before)}
"""

    @staticmethod
    def admin_statistics_reactions(
        period: str,
        products_with_reactions: dict[str, str],
        count_reactions: dict,
        count_reactions_before: dict,
        count_feedbacks: dict,
        count_feedbacks_before: dict,
        count_games: dict,
        count_games_before: dict,
    ):
        is_all_time = period == 'всё время'

        all_liked = 0
        all_liked_before = 0
        all_disliked = 0
        all_disliked_before = 0
        all_none = 0
        all_none_before = 0

        reaction_info = ''
        for index, (product_with_reaction_id, product_with_reactions_name) in enumerate(
            products_with_reactions.items()):
            all_liked += count_reactions[product_with_reaction_id][GenerationReaction.LIKED]
            all_liked_before += count_reactions_before[product_with_reaction_id][GenerationReaction.LIKED]
            all_disliked += count_reactions[product_with_reaction_id][GenerationReaction.DISLIKED]
            all_disliked_before += count_reactions_before[product_with_reaction_id][GenerationReaction.DISLIKED]
            all_none += count_reactions[product_with_reaction_id][GenerationReaction.NONE]
            all_none_before += count_reactions_before[product_with_reaction_id][GenerationReaction.NONE]

            emoji_number = ''.join(f'{digit}\uFE0F\u20E3' for digit in str(index + 1))
            reaction_info += f"""{emoji_number} <b>{product_with_reactions_name}:</b>
    ┣ 👍 {count_reactions[product_with_reaction_id][GenerationReaction.LIKED]} {calculate_percentage_difference(is_all_time, count_reactions[product_with_reaction_id][GenerationReaction.LIKED], count_reactions_before[product_with_reaction_id][GenerationReaction.LIKED])}
    ┣ 👎 {count_reactions[product_with_reaction_id][GenerationReaction.DISLIKED]} {calculate_percentage_difference(is_all_time, count_reactions[product_with_reaction_id][GenerationReaction.DISLIKED], count_reactions_before[product_with_reaction_id][GenerationReaction.DISLIKED])}
    ┗ 🤷 {count_reactions[product_with_reaction_id][GenerationReaction.NONE]} {calculate_percentage_difference(is_all_time, count_reactions[product_with_reaction_id][GenerationReaction.NONE], count_reactions_before[product_with_reaction_id][GenerationReaction.NONE])}
"""

        feedback_statuses = [feedback_status for feedback_status in list(FeedbackStatus.__members__.keys())]
        all_feedbacks = 0
        all_feedbacks_before = 0
        for feedback_status in feedback_statuses:
            all_feedbacks += count_feedbacks[feedback_status]
            all_feedbacks_before += count_feedbacks_before[feedback_status]

        game_types = [game_type for game_type in list(GameType.__members__.keys())]
        all_games = 0
        all_games_before = 0
        for game_type in game_types:
            all_games += count_games[game_type]
            all_games_before += count_games_before[game_type]

        return f"""
#statistics #reactions

📊 <b>{period}</b>

🧐 <b>Реакции</b>
{reaction_info}
<b>Резюме:</b>
    ┣ 👍 {all_liked} {calculate_percentage_difference(is_all_time, all_liked, all_liked_before)}
    ┣ 👎 {all_disliked} {calculate_percentage_difference(is_all_time, all_disliked, all_disliked_before)}
    ┗ 🤷 {all_none} {calculate_percentage_difference(is_all_time, all_none, all_none_before)}

📡 <b>Обратная связь:</b>
1️⃣ <b>Одобрено:</b> {count_feedbacks[FeedbackStatus.APPROVED]} {calculate_percentage_difference(is_all_time, count_feedbacks[FeedbackStatus.APPROVED], count_feedbacks_before[FeedbackStatus.APPROVED])}
2️⃣ <b>Отклонено:</b> {count_feedbacks[FeedbackStatus.DENIED]} {calculate_percentage_difference(is_all_time, count_feedbacks[FeedbackStatus.DENIED], count_feedbacks_before[FeedbackStatus.DENIED])}
3️⃣ <b>В ожидании:</b> {count_feedbacks[FeedbackStatus.WAITING]} {calculate_percentage_difference(is_all_time, count_feedbacks[FeedbackStatus.WAITING], count_feedbacks_before[FeedbackStatus.WAITING])}
4️⃣ <b>Всего:</b> {all_feedbacks} {calculate_percentage_difference(is_all_time, all_feedbacks, all_feedbacks_before)}

🎮 <b>Игр сыграно:</b>
🎳 <b>Боулинг:</b> {count_games[GameType.BOWLING]} {calculate_percentage_difference(is_all_time, count_games[GameType.BOWLING], count_games_before[GameType.BOWLING])}
⚽️ <b>Футбол:</b> {count_games[GameType.SOCCER]} {calculate_percentage_difference(is_all_time, count_games[GameType.SOCCER], count_games_before[GameType.SOCCER])}
🏀 <b>Баскетбол:</b> {count_games[GameType.BASKETBALL]} {calculate_percentage_difference(is_all_time, count_games[GameType.BASKETBALL], count_games_before[GameType.BASKETBALL])}
🎯 <b>Дартс:</b> {count_games[GameType.DARTS]} {calculate_percentage_difference(is_all_time, count_games[GameType.DARTS], count_games_before[GameType.DARTS])}
🎲 <b>Кубик:</b> {count_games[GameType.DICE]} {calculate_percentage_difference(is_all_time, count_games[GameType.DICE], count_games_before[GameType.DICE])}
🎰 <b>Казино:</b> {count_games[GameType.CASINO]} {calculate_percentage_difference(is_all_time, count_games[GameType.CASINO], count_games_before[GameType.CASINO])}
🕹 <b>Всего:</b> {all_games} {calculate_percentage_difference(is_all_time, all_games, all_games_before)}
"""

    @staticmethod
    def admin_statistics_bonuses(
        period: str,
        package_products: dict[str, str],
        count_credits: dict,
        count_credits_before: dict,
        count_all_transactions: dict,
        count_all_transactions_before: dict,
        count_activated_promo_codes: int,
        count_activated_promo_codes_before: int,
    ):
        is_all_time = period == 'всё время'

        all_bonuses = 0
        all_bonuses_before = 0
        credits_info = ''
        for index, (package_product_id, package_product_name) in enumerate(package_products.items()):
            all_bonuses += count_all_transactions[package_product_id]['BONUS']
            all_bonuses_before += count_all_transactions_before[package_product_id]['BONUS']

            is_last = index == len(package_products) - 1
            right_part = '\n' if not is_last else ''
            credits_info += f"    ┣ {package_product_name}: {count_all_transactions[package_product_id]['BONUS']} {calculate_percentage_difference(is_all_time, count_all_transactions[package_product_id]['BONUS'], count_all_transactions_before[package_product_id]['BONUS'])}{right_part}"

        return f"""
#statistics #bonuses

📊 <b>{period}</b>

🎁 <b>Бонусы</b>
1️⃣ <b>Кредитов приобретено:</b>
    ┣ 👤 За приглашения друзей: {count_credits['INVITE_FRIENDS']} {calculate_percentage_difference(is_all_time, count_credits['INVITE_FRIENDS'], count_credits_before['INVITE_FRIENDS'])}
    ┣ 📡 За обратную связь: {count_credits['LEAVE_FEEDBACKS']} {calculate_percentage_difference(is_all_time, count_credits['LEAVE_FEEDBACKS'], count_credits_before['LEAVE_FEEDBACKS'])}
    ┣ 🎮 За игры: {count_credits['PLAY_GAMES']} {calculate_percentage_difference(is_all_time, count_credits['PLAY_GAMES'], count_credits_before['PLAY_GAMES'])}
    ┗ 🪙 Всего: {count_credits['ALL']} {calculate_percentage_difference(is_all_time, count_credits['ALL'], count_credits_before['ALL'])}
2️⃣ <b>Кредитов потрачено на:</b>
{credits_info}
    ┗ Всего: {all_bonuses} {calculate_percentage_difference(is_all_time, all_bonuses, all_bonuses_before)}
3️⃣ <b>Промокоды:</b>
    ┗ Активировано: {count_activated_promo_codes} {calculate_percentage_difference(is_all_time, count_activated_promo_codes, count_activated_promo_codes_before)}
"""

    @staticmethod
    def admin_statistics_ai_expenses(
        period: str,
        ai_products: dict[str, str],
        count_expense_money: dict,
        count_expense_money_before: dict,
    ):
        is_all_time = period == 'всё время'

        ai_info = ''
        final_sum = 0
        final_sum_before = 0
        for index, (ai_product_id, ai_product_name) in enumerate(ai_products.items()):
            is_last = index == len(ai_products) - 1
            left_part = '┣' if not is_last else '┗'
            right_part = '\n' if not is_last else ''

            final_sum += count_expense_money[ai_product_id]['ALL']
            final_sum_before += count_expense_money_before[ai_product_id]['ALL']

            if (
                count_expense_money[ai_product_id]['EXAMPLE_ALL'] or
                count_expense_money[ai_product_id]['AVERAGE_EXAMPLE_PRICE']
            ):
                ai_info += f"""    {left_part} {ai_product_name}:
            ┣ 🎁 СЦП: ${round(count_expense_money[ai_product_id]['AVERAGE_EXAMPLE_PRICE'], 4)} {calculate_percentage_difference(is_all_time, count_expense_money[ai_product_id]['AVERAGE_EXAMPLE_PRICE'], count_expense_money_before[ai_product_id]['AVERAGE_EXAMPLE_PRICE'])}
            ┣ 🚀 Примеры: ${round(count_expense_money[ai_product_id]['EXAMPLE_ALL'], 4)} {calculate_percentage_difference(is_all_time, count_expense_money[ai_product_id]['EXAMPLE_ALL'], count_expense_money_before[ai_product_id]['EXAMPLE_ALL'])}
            ┣ 💸 СЦЗ: ${round(count_expense_money[ai_product_id]['AVERAGE_PRICE'], 4)} {calculate_percentage_difference(is_all_time, count_expense_money[ai_product_id]['AVERAGE_PRICE'], count_expense_money_before[ai_product_id]['AVERAGE_PRICE'])}
            ┗ 💰 Всего: ${round(count_expense_money[ai_product_id]['ALL'], 4)} {calculate_percentage_difference(is_all_time, count_expense_money[ai_product_id]['ALL'], count_expense_money_before[ai_product_id]['ALL'])}{right_part}"""
                continue

            ai_info += f"""    {left_part} {ai_product_name}:
            ┣ 💸 СЦЗ: ${round(count_expense_money[ai_product_id]['AVERAGE_PRICE'], 4)} {calculate_percentage_difference(is_all_time, count_expense_money[ai_product_id]['AVERAGE_PRICE'], count_expense_money_before[ai_product_id]['AVERAGE_PRICE'])}
            ┗ 💰 Всего: ${round(count_expense_money[ai_product_id]['ALL'], 4)} {calculate_percentage_difference(is_all_time, count_expense_money[ai_product_id]['ALL'], count_expense_money_before[ai_product_id]['ALL'])}{right_part}"""

        return f"""
#statistics #expenses

📊 <b>{period}</b>

📉 <b>Расходы</b>
1️⃣ <b>AI модели:</b>
{ai_info}

<b>Всего:</b> ${round(final_sum, 4)} {calculate_percentage_difference(is_all_time, final_sum, final_sum_before)}
"""

    @staticmethod
    def admin_statistics_tech_expenses(
        period: str,
        tech_products: dict[str, str],
        count_expense_money: dict,
        count_expense_money_before: dict,
    ):
        is_all_time = period == 'всё время'

        tech_info = ''
        final_sum = 0
        final_sum_before = 0
        for index, (tech_product_id, tech_product_name) in enumerate(tech_products.items()):
            is_last = index == len(tech_products) - 1
            left_part = '┣' if not is_last else '┗'
            right_part = '\n' if not is_last else ''

            final_sum += count_expense_money[tech_product_id]['ALL']
            final_sum_before += count_expense_money_before[tech_product_id]['ALL']

            tech_info += f"    {left_part} {tech_product_name}: ${round(count_expense_money[tech_product_id]['ALL'], 3)} {calculate_percentage_difference(is_all_time, count_expense_money[tech_product_id]['ALL'], count_expense_money_before[tech_product_id]['ALL'])}{right_part}"

        return f"""
#statistics #expenses

📊 <b>{period}</b>

📉 <b>Расходы</b>
2️⃣ <b>Технические:</b>
{tech_info}

<b>Всего:</b> ${round(final_sum, 4)} {calculate_percentage_difference(is_all_time, final_sum, final_sum_before)}
"""

    @staticmethod
    def admin_statistics_user_expenses(
        period: str,
        subscription_products: dict[str, list[str]],
        count_expense_money: dict,
        count_expense_money_before: dict,
    ):
        is_all_time = period == 'всё время'

        subscription_info = ''
        final_sum = 0
        final_sum_before = 0
        for index, (subscription_product_name, subscription_product_ids) in enumerate(subscription_products.items()):
            is_last = index == len(subscription_products) - 1
            left_part = '┣' if not is_last else '┗'
            right_part = '\n' if not is_last else ''
            text_requests_price = 0
            text_requests_price_before = 0
            summary_requests_price = 0
            summary_requests_price_before = 0
            image_requests_price = 0
            image_requests_price_before = 0
            music_requests_price = 0
            music_requests_price_before = 0
            video_requests_price = 0
            video_requests_price_before = 0
            average_price = 0
            average_price_before = 0
            all_price = 0
            all_price_before = 0

            for subscription_product_id in subscription_product_ids:
                text_requests_price += count_expense_money[subscription_product_id]['TEXT']
                text_requests_price_before += count_expense_money_before[subscription_product_id]['TEXT']
                summary_requests_price += count_expense_money[subscription_product_id]['SUMMARY']
                summary_requests_price_before += count_expense_money_before[subscription_product_id]['SUMMARY']
                image_requests_price += count_expense_money[subscription_product_id]['IMAGE']
                image_requests_price_before += count_expense_money_before[subscription_product_id]['IMAGE']
                music_requests_price += count_expense_money[subscription_product_id]['MUSIC']
                music_requests_price_before += count_expense_money_before[subscription_product_id]['MUSIC']
                video_requests_price += count_expense_money[subscription_product_id]['VIDEO']
                video_requests_price_before += count_expense_money_before[subscription_product_id]['VIDEO']
                average_price += count_expense_money[subscription_product_id]['AVERAGE_PRICE']
                average_price_before += count_expense_money_before[subscription_product_id]['AVERAGE_PRICE']
                all_price += count_expense_money[subscription_product_id]['ALL']
                all_price_before += count_expense_money_before[subscription_product_id]['ALL']

            final_sum += all_price
            final_sum_before += all_price_before
            subscription_info += f"""    {left_part} <b>{subscription_product_name}:</b>
            ┣ 🔤 ${round(text_requests_price, 4)} {calculate_percentage_difference(is_all_time, text_requests_price, text_requests_price_before)}
            ┣ 📝 ${round(summary_requests_price, 4)} {calculate_percentage_difference(is_all_time, summary_requests_price, summary_requests_price_before)}
            ┣ 🖼 ${round(image_requests_price, 4)} {calculate_percentage_difference(is_all_time, image_requests_price, image_requests_price_before)}
            ┣ 🎵 ${round(music_requests_price, 4)} {calculate_percentage_difference(is_all_time, music_requests_price, music_requests_price_before)}
            ┣ 📹 ${round(video_requests_price, 4)} {calculate_percentage_difference(is_all_time, video_requests_price, video_requests_price_before)}
            ┣ 💸 СЦП: ${round(average_price, 4)} {calculate_percentage_difference(is_all_time, average_price, average_price_before)}
            ┗ 💰 Всего: ${round(all_price, 4)} {calculate_percentage_difference(is_all_time, all_price, all_price_before)}{right_part}"""

        return f"""
#statistics #expenses

📊 <b>{period}</b>

📉 <b>Расходы</b>
3️⃣ <b>Подписчики:</b>
{subscription_info}

<b>Всего:</b> ${round(final_sum, 4)} {calculate_percentage_difference(is_all_time, final_sum, final_sum_before)}
"""

    @staticmethod
    def admin_statistics_expenses(
        period: str,
        count_expense_money: dict,
        count_expense_money_before: dict,
    ):
        is_all_time = period == 'всё время'

        return f"""
#statistics #expenses

📊 <b>{period}</b>

📉 <b>Расходы</b>
<b>Всего:</b> ${round(count_expense_money['ALL'], 4)} {calculate_percentage_difference(is_all_time, count_expense_money['ALL'], count_expense_money_before['ALL'])}
"""

    @staticmethod
    def admin_statistics_incomes(
        period: str,
        subscription_products: dict[str, list[str]],
        package_products: dict[str, str],
        count_income_money: dict,
        count_income_money_before: dict,
    ):
        is_all_time = period == 'всё время'

        subscription_info = ''
        for index, (subscription_product_name, subscription_product_ids) in enumerate(subscription_products.items()):
            if 'Бесплатные' in subscription_product_name:
                continue

            is_last = index == len(subscription_products) - 1
            right_part = '\n' if not is_last else ''
            current_income_money = 0
            current_income_money_before = 0
            for subscription_product_id in subscription_product_ids:
                current_income_money += count_income_money[subscription_product_id]
                current_income_money_before += count_income_money_before[subscription_product_id]
            subscription_info += f"    ┣ {subscription_product_name}: {round(current_income_money, 2)}₽ {calculate_percentage_difference(is_all_time, current_income_money, current_income_money_before)}{right_part}"
        package_info = ''
        for index, (package_product_id, package_product_name) in enumerate(package_products.items()):
            is_last = index == len(package_products) - 1
            right_part = '\n' if not is_last else ''
            package_info += f"    ┣ {package_product_name}: {round(count_income_money[package_product_id], 2)}₽ {calculate_percentage_difference(is_all_time, count_income_money[package_product_id], count_income_money_before[package_product_id])}{right_part}"

        return f"""
#statistics #incomes

📊 <b>{period}</b>

📈 <b>Доходы</b>

1️⃣ <b>Подписки:</b>
{subscription_info}
    ┗ Всего: {round(count_income_money['SUBSCRIPTION_ALL'], 2)}₽ {calculate_percentage_difference(is_all_time, count_income_money['SUBSCRIPTION_ALL'], count_income_money_before['SUBSCRIPTION_ALL'])}
2️⃣ <b>Пакеты:</b>
{package_info}
    ┗ Всего: {round(count_income_money['PACKAGES_ALL'], 2)}₽ {calculate_percentage_difference(is_all_time, count_income_money['PACKAGES_ALL'], count_income_money_before['PACKAGES_ALL'])}

<b>Средний чек:</b> {round(count_income_money['AVERAGE_PRICE'], 2)}₽ {calculate_percentage_difference(is_all_time, count_income_money['AVERAGE_PRICE'], count_income_money_before['AVERAGE_PRICE'])}
<b>Всего:</b> {round(count_income_money['ALL'], 2)}₽ {calculate_percentage_difference(is_all_time, count_income_money['ALL'], count_income_money_before['ALL'])}
<b>Вал:</b> {round(count_income_money['VAL'], 2)}₽ {calculate_percentage_difference(is_all_time, count_income_money['VAL'], count_income_money_before['VAL'])}
"""

    @staticmethod
    def admin_payment_subscription_changed_status(
        status: SubscriptionStatus,
        subscription: Subscription,
        product: Product,
        is_trial=False,
        is_renew=False,
    ):
        if status == SubscriptionStatus.ACTIVE:
            if is_trial and is_renew:
                return f"""
#payment #trial #renew #subscription #success

🤑 <b>Успешно продлена подписка после пробного периода у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}
💸 Чистая сумма: {subscription.income_amount}{Currency.SYMBOLS[subscription.currency]}

Продолжаем в том же духе 💪
"""
            elif not is_trial and is_renew:
                return f"""
#payment #renew #subscription #success

🤑 <b>Успешно продлена подписка у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}
💸 Чистая сумма: {subscription.income_amount}{Currency.SYMBOLS[subscription.currency]}

Продолжаем в том же духе 💪
"""
            elif is_trial and not is_renew:
                return f"""
#payment #trial #subscription #success

🤑 <b>Успешно оформлен пробный период подписки у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}
💸 Чистая сумма: {subscription.income_amount}{Currency.SYMBOLS[subscription.currency]}

Продолжаем в том же духе 💪
"""
            elif not is_trial and not is_renew:
                return f"""
#payment #subscription #success

🤑 <b>Успешно оформлена подписка у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}
💸 Чистая сумма: {subscription.income_amount}{Currency.SYMBOLS[subscription.currency]}

Продолжаем в том же духе 💪
"""
        elif status == SubscriptionStatus.DECLINED:
            if is_trial and is_renew:
                return f"""
#payment #trial #renew #subscription #declined

❌ <b>Не смогли продлить подписку после пробного периода у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}

Грустно, но что поделать 🤷
"""
            elif not is_trial and is_renew:
                return f"""
#payment #renew #subscription #declined

❌ <b>Не смогли продлить подписку у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}

Грустно, но что поделать 🤷
"""
            elif is_trial and not is_renew:
                return f"""
#payment #trial #subscription #declined

❌ <b>Отмена оплаты пробного периода подписки у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}

Грустно, но что поделать 🤷
"""
            elif not is_trial and not is_renew:
                return f"""
#payment #subscription #declined

❌ <b>Отмена оплаты подписки у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}

Грустно, но что поделать 🤷
"""
        elif status == SubscriptionStatus.CANCELED:
            if is_trial:
                current_date = datetime.now(timezone.utc)

                return f"""
#payment #trial #subscription #canceled

❌ <b>Отмена продления пробного периода подписки у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}
💸 Чистая сумма: {subscription.income_amount}{Currency.SYMBOLS[subscription.currency]}
🗓 Период подписки: {subscription.start_date.strftime("%d.%m.%Y")}-{current_date.strftime("%d.%m.%Y")}

Грустно, но что поделать 🤷
"""
            else:
                return f"""
#payment #subscription #canceled

❌ <b>Отмена продления подписки у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}
💸 Чистая сумма: {subscription.income_amount}{Currency.SYMBOLS[subscription.currency]}
🗓 Период подписки: {subscription.start_date.strftime("%d.%m.%Y")}-{subscription.end_date.strftime("%d.%m.%Y")}

Грустно, но что поделать 🤷
"""
        elif status == SubscriptionStatus.RESUBSCRIBED:
            if is_trial:
                return f"""
#payment #trial #subscription #resubscribe

🤑 <b>Возобновление пробного периода подписки у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}
💸 Чистая сумма: {subscription.income_amount}{Currency.SYMBOLS[subscription.currency]}
🗓 Период подписки: {subscription.start_date.strftime("%d.%m.%Y")}-{subscription.end_date.strftime("%d.%m.%Y")}

Вернулся к нам, продолжаем в том же духе 💪
"""
            else:
                return f"""
#payment #subscription #resubscribe

🤑 <b>Возобновление продления подписки у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}
💸 Чистая сумма: {subscription.income_amount}{Currency.SYMBOLS[subscription.currency]}
🗓 Период подписки: {subscription.start_date.strftime("%d.%m.%Y")}-{subscription.end_date.strftime("%d.%m.%Y")}

Вернулся к нам, продолжаем в том же духе 💪
"""
        elif status == SubscriptionStatus.ERROR:
            if is_renew:
                return f"""
#payment #renew #subscription #error

🚫 <b>Неизвестный статус при продлении подписки у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}

@roman_danilov, посмотришь? 🤨
"""
            else:
                return f"""
#payment #subscription #error

🚫 <b>Неизвестный статус при оплате подписки у пользователя: {subscription.user_id}</b>

ℹ️ ID: {subscription.id}
💱 Метод оплаты: {subscription.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
💰 Сумма: {subscription.amount}{Currency.SYMBOLS[subscription.currency]}

@roman_danilov, посмотришь? 🤨
"""

    @staticmethod
    def admin_payment_package_changed_status(
        status: PackageStatus,
        package: Package,
        product: Product,
    ):
        if status == PackageStatus.SUCCESS:
            return f"""
#payment #package #success

🤑 <b>Успешно прошла оплата пакета у пользователя: {package.user_id}</b>

ℹ️ ID: {package.id}
💱 Метод оплаты: {package.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
🔢 Количество: {package.quantity}
💰 Сумма: {package.amount}{Currency.SYMBOLS[package.currency]}
💸 Чистая сумма: {package.income_amount}{Currency.SYMBOLS[package.currency]}

Продолжаем в том же духе 💪
"""
        elif status == PackageStatus.DECLINED:
            return f"""
#payment #package #declined

❌ <b>Отмена оплаты пакета у пользователя: {package.user_id}</b>

ℹ️ ID: {package.id}
💱 Метод оплаты: {package.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
🔢 Количество: {package.quantity}
💰 Сумма: {package.amount}{Currency.SYMBOLS[package.currency]}

Грустно, но что поделать 🤷
"""
        elif status == PackageStatus.ERROR:
            return f"""
#payment #package #error

🚫 <b>Неизвестный статус при оплате пакета у пользователя: {package.user_id}</b>

ℹ️ ID: {package.id}
💱 Метод оплаты: {package.payment_method}
💳 Тип: {product.names.get(LanguageCode.RU)}
🔢 Количество: {package.quantity}
💰 Сумма: {package.amount}{Currency.SYMBOLS[package.currency]}

@roman_danilov, посмотришь? 🤨'
"""

    @staticmethod
    def admin_payment_packages_changed_status(
        status: PackageStatus,
        user_id: str,
        payment_method: PaymentMethod,
        amount: float,
        income_amount: float,
        currency: Currency,
    ):
        if status == PackageStatus.SUCCESS:
            return f"""
#payment #packages #success

🤑 <b>Успешно прошла оплата пакетов у пользователя: {user_id}</b>

💱 Метод оплаты: {payment_method}
💰 Сумма: {amount}{Currency.SYMBOLS[currency]}
💸 Чистая сумма: {income_amount}{Currency.SYMBOLS[currency]}

Продолжаем в том же духе 💪
"""
        elif status == PackageStatus.DECLINED:
            return f"""
#payment #packages #declined

❌ <b>Отмена оплаты пакетов у пользователя: {user_id}</b>

💱 Метод оплаты: {payment_method}
💰 Сумма: {amount}{Currency.SYMBOLS[currency]}

Грустно, но что поделать 🤷
"""
        elif status == PackageStatus.ERROR:
            return f"""
#payment #packages #error

🚫 <b>Неизвестный статус при оплате пакетов у пользователя: {user_id}</b>

💱 Метод оплаты: {payment_method}
💰 Сумма: {amount}{Currency.SYMBOLS[currency]}

@roman_danilov, посмотришь? 🤨
"""
